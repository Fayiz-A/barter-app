{"version":3,"sources":["configs/firebase.config.ts","constants/globals.ts","components/CustomAppBar.tsx","components/CustomTextInput.tsx","components/CustomButton.tsx","constants/status.ts","screens/LoginScreen.tsx","screens/RequestScreen.tsx","screens/ExchangeScreen.tsx","screens/ ExchangeViewTabNavigator.tsx","screens/SettingsScreen.tsx","screens/MyBartersScreen.tsx","screens/secondary/ItemDetailScreen.tsx","screens/NotificationsScreen.tsx","App.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","collections","names","users","itemsToExchange","barters","notifications","name","emailID","donorID","CustomAppBar","props","useState","notificationCount","setNotificationCount","navigation","useNavigation","useEffect","displayNotifications","database","collection","globals","where","auth","currentUser","email","onSnapshot","snapshot","notificationList","docs","map","doc","data","length","Appbar","Header","style","backgroundColor","color","drawerAvailable","Action","icon","size","onPress","dispatch","DrawerActions","toggleDrawer","backButtonAvailable","canGoBack","goBack","View","Content","title","alignItems","navigate","Badge","styles","badge","visible","toString","defaultProps","StyleSheet","create","centerComponent","fontSize","position","top","right","CustomTextInput","TextInput","placeholder","textInput","onChangeText","value","secureTextEntry","obscureText","multiline","maxLength","undefined","width","height","padding","borderBottomWidth","outlinedBorder","borderColor","borderWidth","borderRadius","CustomButton","TouchableOpacity","button","Text","buttonText","Status","buttonColor","justifyContent","paddingHorizontal","paddingVertical","shadowOpacity","shadowRadius","shadowOffset","elevation","buttonTextColor","fontWeight","fontFamily","LoginScreen","dimensions","useWindowDimensions","setEmail","password","setPassword","modalVisible","setModalVisible","emailIDInModal","setEmailIDInModal","address","setAddress","contactNo","setContactNo","setName","textInputDetails","buttonDetails","a","async","authenticateUserWithEmailAndPassword","authStatus","emptyField1","emptyField2","emailBadlyFormatted","badCredentials","successful","userNotFound","userDisabled","alert","replace","signUpUser","emailAlreadyInUse","weakPassword","operationNotAllowed","signUpModalDetailsTextInput","text","modalButtonDetails","setUserDetailsInFirestore","userDetailsRegisteredStatus","background","modal","marginLeft","marginTop","modalContent","modalHeadingContainer","modalHeading","modalButtonGroupContainer","paddingTop","modalButtonContainer","paddingBottom","imageContainer","avatar","detailsContainer","textInputContainer","buttonContainer","validateCredentials","trim","EmailValidator","validate","credentialsValidStatus","signInWithEmailAndPassword","console","error","errCode","code","unknownError","createUserWithEmailAndPassword","GLOBALS","add","Portal","Modal","dismissable","contentContainerStyle","detail","rounded","overlayContainerStyle","type","RequestScreen","description","setDescription","allTextInputsContainer","paddingLeft","submitButtonContainer","paddingRight","validateAndSubmitDetails","log","shortDetails","timeStamp","Timestamp","now","userID","sent","then","res","catch","err","dataSubmittedStatus","ExchangeScreen","itemsList","setItemsList","lastItemFetchedTimestamp","setLastItemFetchedTimestamp","fetchItems","exchangeButtonContainer","divider","orderBy","startAfter","limit","dataList","id","oldList","push","oldTimestamp","e","exchangeItem","item","onEndReachedCalledDuringMomentum","renderItem","index","Item","theme","colors","left","prop","Icon","Divider","keyExtractor","onEndReachedThreshold","onEndReached","onMomentumScrollBegin","ExchangeViewTabNavigator","BottomTab","createMaterialBottomTabNavigator","Navigator","barStyle","Screen","component","options","tabBarLabel","tabBarIcon","SettingsScreen","setEmailID","userDocId","setUserDocId","windowDetails","currentUserEmail","getAndSetUserDetails","currentUserEmailID","update","updateProfile","MyBartersScreen","myBarters","setMyBarters","bartersList","FlatList","docID","status","set","receiverID","itemName","itemDescription","read","updateItemInDatabase","ItemDetailScreen","route","useRoute","params","itemKey","itemValue","sendButtonContainer","keyName","itemKeyNameInItemObject","containerStyle","NotificationsScreen","setNotifications","notificationsList","rowBehind","flex","flexDirection","container","backTextWhite","textAlign","alignSelf","rowBack","backRightBtn","bottom","backRightBtnRight","Animated","key","bottomDivider","Chevron","Title","Subtitle","disableLeftSwipe","leftOpenValue","renderHiddenItem","onSwipeValueChange","swipeData","newData","splice","previewRowKey","previewOpenValue","previewOpenDelay","Root","Stack","createStackNavigator","defaultOptions","headerShown","stackScreenInfoList","initialRouteName","App","Drawer","createDrawerNavigator","drawer","borderTopRightRadius","borderBottomRightRadius","drawerContent","logOutButton","logOutButtonContent","logOutButtonText","drawerScreenInfoList","Provider","NavigationContainer","drawerStyle","DrawerContent","state","descriptors","progress","signOut","drawerType","Platform","OS","document","createElement","textContent","head","append","injectWebCss"],"mappings":"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","file":"static/js/app.75d9a512.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n   apiKey: \"AIzaSyCtJWEiHkscsBR9mhAV8PzPn7Ijy46bOdI\",\n   authDomain: \"barter-app-1d780.firebaseapp.com\",\n   projectId: \"barter-app-1d780\",\n   storageBucket: \"barter-app-1d780.appspot.com\",\n   messagingSenderId: \"544892223600\",\n   appId: \"1:544892223600:web:7f83694a6daecd2992f4b5\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase.firestore();","export default {\n   firebase: {\n      firestore: {\n         collections: {\n            names: {\n               users: 'users',\n               itemsToExchange: 'itemsToExchange',\n               barters: 'barters',\n               notifications: 'notifications'\n            },\n            users: {\n               names: {\n                  name: 'name',\n                  emailID: 'emailID'\n               }\n            },\n            barters: {\n               names: {\n                  donorID: 'donorID',\n               }\n            }\n         }\n      }\n   }\n}","import React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, ColorValue } from 'react-native';\nimport { Appbar, Badge } from 'react-native-paper';\nimport { useNavigation, DrawerActions } from '@react-navigation/native';\n\nimport database from '../configs/firebase.config';\nimport globals from '../constants/globals';\nimport firebase from 'firebase';\n\ninterface Props {\n   title:string,\n   color?: ColorValue,\n   drawerAvailable?: boolean,\n   backButtonAvailable?: boolean,\n   displayNotifications?: boolean\n}\n\nexport default function CustomAppBar(props: Props) {\n\n   const [notificationCount, setNotificationCount] = useState<number>(0);\n   \n   const navigation = useNavigation();\n   \n   useEffect(() => {\n      if(props.displayNotifications) {\n         database.collection(globals.firebase.firestore.collections.names.notifications).where('receiverID', '==', firebase.auth().currentUser?.email).where('read', '==', false).onSnapshot(snapshot => {\n            let notificationList = snapshot.docs.map(doc => doc.data());\n            setNotificationCount(notificationList.length);\n         });\n      }\n   })\n\n   return(\n      <Appbar.Header\n         style={{backgroundColor: props.color ? props.color:'#6d4c41'}}\n      >\n         {\n            props.drawerAvailable ? <Appbar.Action \n               icon={'menu'}\n               size={30}\n               onPress={() => navigation.dispatch(DrawerActions.toggleDrawer)}\n            />\n            :\n            props.backButtonAvailable ? <Appbar.Action \n               icon={'chevron-left'}\n               size={30}\n               onPress={() => {\n                  if(navigation.canGoBack()) navigation.goBack()\n               }}\n            />\n            :\n            <View></View>\n         }\n         <Appbar.Content \n            title={props.title} \n            style={{alignItems: \"center\"}}\n         />\n         {\n            props.displayNotifications ? <View>\n               <Appbar.Action \n                  icon={'bell'}\n                  size={30}\n                  onPress={() => navigation.navigate('notificationsScreen')}\n               />\n               <Badge style={styles.badge} visible={true}>{notificationCount.toString()}</Badge>\n            </View>\n            :\n            <View></View>\n         }\n      </Appbar.Header>\n   );\n}\n\nCustomAppBar.defaultProps = {\n   displayNotifications: true\n};\n\nconst styles = StyleSheet.create({\n   centerComponent: {\n      fontSize: 20\n   },\n   badge: {\n      position: 'absolute',\n      top: 10,\n      right: 10,\n      backgroundColor: 'red'\n   }\n})","import React from 'react';\nimport { StyleSheet, TextInput } from 'react-native';\nimport { Input } from 'react-native-elements';\n\nexport interface Props {\n   placeholder:string,\n   width: number,\n   height?: number,\n   onChangeText: (text:string) => void,\n   value: string,\n   obscureText: boolean,\n   multiline?: boolean,\n   maxLength?: number,\n   outlinedBorder?:boolean\n}\n\nexport default function CustomTextInput(props:Props) {\n   return (\n      <TextInput \n         placeholder={props.placeholder}\n         style={styles(props).textInput}\n         onChangeText={props.onChangeText}\n         value={props.value}\n         secureTextEntry={props.obscureText}\n         multiline={props.multiline || false}\n         maxLength={props.maxLength || undefined}\n      />\n   );\n}\n\nconst styles = (props:Props) => StyleSheet.create({\n   textInput: {\n      width: props.width,\n      height: props.height || undefined,\n      fontSize: 23,\n      padding: 3,\n      borderBottomWidth: props.outlinedBorder ? undefined:2,\n      borderColor: 'black',\n      borderWidth: props.outlinedBorder ? 5:undefined,\n      borderRadius: props.outlinedBorder ? 25:0\n   }\n})","import React, { } from 'react';\nimport { TouchableOpacity, Text, StyleSheet, ColorValue } from 'react-native';\nimport { Colors } from 'react-native-elements';\n\ninterface Props {\n   buttonText:string,\n   buttonColor: ColorValue,\n   buttonTextColor: ColorValue,\n   onPress: () => void\n}\n\nexport default function CustomButton (props:Props) {\n   return (\n      <TouchableOpacity\n         style={styles(props).button}\n         onPress={props.onPress}\n      >\n         <Text style={styles(props).buttonText}>{props.buttonText}</Text>\n      </TouchableOpacity>\n   );\n}\n\nconst styles = (props:Props) => StyleSheet.create({\n   button: {\n      backgroundColor: props.buttonColor,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 23,\n      paddingHorizontal: 7,\n      paddingVertical: 5,\n      shadowOpacity: 0.5,\n      shadowRadius: 2.0,\n      shadowOffset: {\n         width: 0.0,\n         height: 4.0\n      },\n      elevation: 20\n   },\n   buttonText: {\n      fontSize: 23,\n      color: props.buttonTextColor,\n      fontWeight: 'bold',\n      fontFamily: 'cursive'\n   }\n})","enum Status {\n   successful,\n   unknownError,\n   badCredentials,\n   emptyField1,\n   emptyField2,\n   emailBadlyFormatted,\n   userNotFound,\n   userDisabled,\n   operationNotAllowed,\n   weakPassword,\n   emailAlreadyInUse,\n   shortDetails\n} \n\nexport default Status;","import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, ScaledSize, Dimensions, ColorValue, useWindowDimensions } from \"react-native\";\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport { Avatar } from 'react-native-elements';\nimport CustomButton from '../components/CustomButton';\nimport EmailValidator from 'email-validator';\nimport { Modal, Portal } from 'react-native-paper';\n\nimport firebase from 'firebase';\nimport database from '../configs/firebase.config';\n\nimport GLOBALS from '../constants/globals';\nimport Status from '../constants/status';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   obscureText?: boolean\n}\n\ninterface ButtonDetail {\n   buttonText:string,\n   onPress: () => void,\n   buttonColor: ColorValue\n}\n\ninterface Props {\n   navigation: any,\n}\n\nexport default function LoginScreen(props:Props) {\n\n   let dimensions = useWindowDimensions();\n   \n   let [ email, setEmail ] = useState<string>('abc@gmail.com');\n   let [ password, setPassword ] = useState<string>('testing');\n\n   let [ modalVisible, setModalVisible ] = useState<boolean>(false);\n   let [ emailIDInModal, setEmailIDInModal ] = useState<string>('');\n   let [ address, setAddress ] = useState<string>('');\n   let [ contactNo, setContactNo ] = useState<string>('');\n   let [ name, setName ] = useState<string>('');\n\n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder:'Email',\n         onChangeText: (email:string) => setEmail(email),\n         value: email,\n      },\n      {\n         placeholder:'Password',\n         onChangeText: (password:string) => setPassword(password),\n         value: password,\n         obscureText: true\n      }\n   ]\n\n   let buttonDetails:ButtonDetail[] = [\n      {\n         buttonColor: '#4CAF50',\n         buttonText: 'Sign In',\n         onPress: async () => {\n            let authStatus:Status = await authenticateUserWithEmailAndPassword(email, password);\n\n            switch(authStatus) {\n               case Status.emptyField1:\n                  alert(`Empty email`)\n               break;\n               case Status.emptyField2:\n                  alert(`Empty password`)\n               break;\n               case Status.emailBadlyFormatted:\n                  alert(`Email badly formatted`)\n               break;\n               case Status.badCredentials:\n                  alert(`Wrong credentials`);\n               break;\n               case Status.successful:\n                  props.navigation.replace('homeScreen')\n               break;\n               case Status.userNotFound:\n                  alert(`User not found`)\n               break;\n               case Status.userDisabled:\n                  alert(`User disabled`)\n               break;\n               default: alert(`Some unknown error occurred`)\n            }\n         }\n      },\n      {\n         buttonColor: '#3F51B5',\n         buttonText: 'Sign Up',\n         onPress: async () => {\n            let authStatus:Status = await signUpUser(email, password);\n\n            switch(authStatus) {\n               case Status.emptyField1:\n                  alert(`Empty email`)\n               break;\n               case Status.emptyField2:\n                  alert(`Empty password`)\n               break;\n               case Status.emailBadlyFormatted:\n                  alert(`Email badly formatted`)\n               break;\n               case Status.successful:\n                  // alert(`User added successfully`)\n                  setModalVisible(true);\n               break;\n               case Status.emailAlreadyInUse:\n                  alert(`Email already in use`)\n               break;\n               case Status.weakPassword:\n                  alert(`Weak password`)\n               break;\n               case Status.operationNotAllowed:\n                  alert(`Operation not allowed`)\n               break;\n               default: alert(`Some unknown error occurred`)\n            }\n         }\n      }\n   ]\n\n   let signUpModalDetailsTextInput:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Email ID',\n         onChangeText: (text:string) => setEmailIDInModal(text),\n         value: emailIDInModal,\n      },\n      {\n         placeholder: 'Address',\n         onChangeText: (text:string) => setAddress(text),\n         value: address,\n      },\n      {\n         placeholder: 'Contact No.',\n         onChangeText: (text:string) => setContactNo(text),\n         value: contactNo,\n      }\n   ]\n\n   let modalButtonDetails:ButtonDetail[] = [\n      {\n         buttonText: 'Submit',\n         buttonColor: 'purple',\n         onPress: async () => {\n            setModalVisible(false);\n            let userDetailsRegisteredStatus:Status = await setUserDetailsInFirestore(name, emailIDInModal, address, contactNo);\n            \n            switch (userDetailsRegisteredStatus) {\n               case Status.successful:\n                  props.navigation.navigate('homeScreen')\n               break;\n               default:\n                  alert(`Some Error Occurred`);\n            }\n         }\n      },\n      {\n         buttonText: 'Cancel',\n         buttonColor: 'red',\n         onPress: () => setModalVisible(false)\n      }\n   ] \n\n   const styles = (dimensions: ScaledSize) => StyleSheet.create({\n      background: {\n         backgroundColor:'#F8BE85',\n         height: '100vh',      \n      }, \n      modal: {\n         marginLeft: dimensions.width / 2 - ((dimensions.width / 2) / 2), // dimensions.width / 2 is the width of the modal\n         marginTop: dimensions.height / 2 - ((dimensions.height / 2) / 2), // dimensions.height / 2 is the width of the modal\n         width: dimensions.width / 2,\n         height: dimensions.height / 1.9,\n         shadowOpacity: 0.5,\n         shadowRadius: 2.0,\n         shadowOffset: {\n            width: 0.0,\n            height: 6.0\n         },\n         elevation: 20.0,\n         backgroundColor: '#FFC107',\n         borderRadius: 20.0,\n      },\n      modalContent: {\n         justifyContent: 'flex-start',\n         alignItems: 'center',\n         height: '100%',\n         width: '100%',\n         borderRadius: 20.0\n      },\n      modalHeadingContainer: {\n         paddingVertical: 1,\n         alignItems: 'center',\n         width: '100%',\n      },\n      modalHeading: {\n         fontFamily: 'cursive',\n         fontSize: 30,\n         fontWeight: 'bold'\n      },\n      modalButtonGroupContainer: {\n         paddingTop: 5,\n      },\n      modalButtonContainer: {\n         paddingBottom: dimensions.height / 60,\n      },\n      imageContainer: {\n         paddingVertical: 20,\n         justifyContent: \"center\",\n         alignItems: 'center',\n      },\n      avatar: {\n         backgroundColor: 'white', \n         borderWidth: 5\n      },\n      detailsContainer: {\n         width: '100%',\n         alignItems: 'center'\n      },\n      textInputContainer: {\n         paddingTop: 20,\n      },\n      buttonContainer: {\n         paddingTop: 15,\n      }\n   })\n\n   const validateCredentials = (email:string, password:string):Status => {\n      if(email == null || email.trim().length == 0) return Status.emptyField1\n      if(password == null || password.trim().length == 0) return Status.emptyField2\n      if(!EmailValidator.validate(email)) return Status.emailBadlyFormatted\n      return Status.successful;\n   }\n   \n   const authenticateUserWithEmailAndPassword = async (email:string, password: string) => {\n      let credentialsValidStatus:Status = validateCredentials(email, password);\n      if(credentialsValidStatus != Status.successful) return credentialsValidStatus;\n   \n      try {\n         await firebase.auth().signInWithEmailAndPassword(email, password);\n         return Status.successful;\n      } catch(err) {\n         console.error(err);\n         let errCode = err.code;\n   \n         switch(errCode) {\n            case 'auth/wrong-password':\n               return Status.badCredentials\n            break;\n            case 'auth/user-not-found':\n               return Status.userNotFound\n            break;\n            case 'auth/user-disabled':\n               return Status.userDisabled\n            break;\n            case 'auth/invalid-email':\n               return Status.emailBadlyFormatted\n            break;\n            default: return Status.unknownError\n         } \n      };\n   }\n   \n   const signUpUser = async (email:string, password: string):Promise<Status> => {\n      \n      let credentialsValidStatus:Status = validateCredentials(email, password);\n      if(credentialsValidStatus != Status.successful) return credentialsValidStatus;\n   \n      try {\n         await firebase.auth().createUserWithEmailAndPassword(email, password);\n         return Status.successful;\n      } catch(err) {\n         console.error(err);\n         let errCode = err.code;\n   \n         switch(errCode) {\n            case 'auth/email-already-in-use':\n               return Status.emailAlreadyInUse\n            break;\n            case 'auth/invalid-email':\n               return Status.emailBadlyFormatted\n            break;\n            case 'auth/operation-not-allowed':\n               return Status.operationNotAllowed\n            break;\n            case 'auth/weak-password':\n               return Status.weakPassword\n            break;\n            default: return Status.unknownError\n         } \n      };\n   }\n\n   const setUserDetailsInFirestore = async (name:string, emailID:string, address:string, contactNo:string):Promise<Status> => {\n      try {\n         const res = await database.collection(GLOBALS.firebase.firestore.collections.names.users).add({\n            name: name,\n            emailID: emailID,\n            address: address,\n            contactNo: contactNo\n         });\n         return Status.successful;\n      } catch (err) {\n         console.error(err);\n         return Status.unknownError;\n      }\n   }\n\n   return (\n      <View style={styles(dimensions).background}>\n         <View>\n            <CustomAppBar title='Login' displayNotifications={false}/>\n               <Portal>\n                  <Modal\n                     dismissable={false}\n                     visible={modalVisible}\n                     contentContainerStyle={styles(dimensions).modalContent}\n                     style={styles(dimensions).modal}\n                  >\n                     <View style={styles(dimensions).modalHeadingContainer}>\n                        <Text style={styles(dimensions).modalHeading}>\n                           Information:\n                        </Text>\n                     </View>\n                     <View>\n                        {\n                           signUpModalDetailsTextInput.map((detail:TextInputDetail) => {\n                              return (\n                                 <View>\n                                    <CustomTextInput \n                                       placeholder={detail.placeholder}\n                                       onChangeText={detail.onChangeText}\n                                       value={detail.value}\n                                       obscureText={false}\n                                       width={(dimensions.width / 2) / 2} //dimensions.width / 2 is the width of the modal\n                                    />\n                                 </View>\n                              )\n                           })\n                        }\n                        <View style={styles(dimensions).modalButtonGroupContainer}>\n                        {\n                           modalButtonDetails.map((detail:ButtonDetail) => {\n                              return (\n                                 <View style={styles(dimensions).modalButtonContainer}>\n                                    <CustomButton \n                                       buttonText={detail.buttonText}\n                                       buttonColor={detail.buttonColor}\n                                       onPress={detail.onPress}\n                                       buttonTextColor='white'\n                                    />\n                                 </View>\n                              )\n                           })\n                        }\n                        </View>\n                     </View>\n                  </Modal>\n               </Portal>\n            <View style={styles(dimensions).imageContainer}>\n               <Avatar \n                  rounded\n                  overlayContainerStyle={styles(dimensions).avatar}\n                  size = {dimensions.height / 3}\n                  icon={{\n                     type:'ionicon',\n                     name: 'leaf',\n                     color: '#63b175',\n                  }}\n               />\n            </View>\n            <View style={styles(dimensions).detailsContainer}>\n               {\n                  textInputDetails.map((detail:TextInputDetail) => {\n                     return (\n                        <View style={styles(dimensions).textInputContainer}>\n                           <CustomTextInput \n                              placeholder={detail.placeholder} \n                              width={dimensions.width / 2}\n                              value={detail.value}\n                              onChangeText={detail.onChangeText}\n                              obscureText={detail.obscureText ? detail.obscureText:false}\n                           />\n                        </View>\n                     )\n                  })\n               }\n               <View>\n                  {\n                     buttonDetails.map((detail:ButtonDetail) => {\n                        return (\n                           <View style={styles(dimensions).buttonContainer}>\n                              <CustomButton \n                                 buttonText={detail.buttonText}\n                                 buttonTextColor='white'\n                                 buttonColor={detail.buttonColor}\n                                 onPress={detail.onPress}\n                              />\n                           </View>\n                        );\n                     })\n                  }\n               </View>\n            </View>\n         </View>\n      </View> \n   );\n}","import React, { useEffect, useState } from 'react';\nimport { View, Dimensions, ScaledSize, StyleSheet, useWindowDimensions } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport CustomButton from '../components/CustomButton';\n\nimport Status from '../constants/status';\nimport GLOBALS from '../constants/globals';\n\nimport database from '../configs/firebase.config';\nimport firebase from 'firebase';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   maxLength?: number,\n   multiline?: boolean,\n   height?: number\n}\n\nfunction RequestScreen() {\n\n   const dimensions = useWindowDimensions();\n      \n   let [ name, setName ] = useState<string>('');\n   let [ description, setDescription ] = useState<string>('');\n   \n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Description',\n         onChangeText: (text:string) => setDescription(text),\n         value: description,\n         maxLength: 200,\n         height: dimensions.height * 0.6,\n         multiline: true\n      },\n   ]\n\n   const styles = (dimensions:ScaledSize) => StyleSheet.create({\n      allTextInputsContainer: {\n         paddingLeft: (dimensions.width / 2 - ((dimensions.width / 2) / 2)), // dimensions.width / 2 is the width of the textinput\n      },\n      textInputContainer: {\n         paddingTop: 20,\n      },\n      textInput: {\n         fontSize: 20,\n      },\n      submitButtonContainer: {\n         paddingTop: 20,\n         paddingLeft: (dimensions.width / 2) - (100 / 2),// 100 is the width of the button\n         paddingRight: (dimensions.width / 2) - (100 / 2)// 100 is the width of the button\n      }\n   })\n\n   const validateAndSubmitDetails = async (name:string, description:string) => {\n      console.log(`Name and Description: ${name} ${description}`)\n      if(name == null || name.trim().length == 0) return Status.emptyField1;\n      if(description == null || description.trim().length == 0) return Status.emptyField2;\n\n      if(description.trim().length < 10) return Status.shortDetails;\n\n      return await database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).add({\n         name: name,\n         description: description,\n         timeStamp: firebase.firestore.Timestamp.now(),\n         userID: firebase.auth().currentUser?.email,\n         sent: false\n      })\n      .then(res => Status.successful)\n      .catch(err => Status.unknownError);\n   }\n\n   return (\n      <View>\n         <CustomAppBar title='Request Screen' color='#96D25A'/>\n         <View style={styles(dimensions).allTextInputsContainer}>\n         {\n            textInputDetails.map(\n               (detail:TextInputDetail) => {\n                  return (\n                     <View style={styles(dimensions).textInputContainer}>\n                        <CustomTextInput \n                           placeholder={detail.placeholder}\n                           onChangeText={detail.onChangeText}\n                           value={detail.value}\n                           obscureText={false}\n                           width={dimensions.width / 2}\n                           height={detail.height || undefined}\n                           multiline={detail.multiline || false}\n                           maxLength={detail.maxLength || undefined}\n                           outlinedBorder={true}\n                        />\n                     </View>\n                  )\n               }\n            )\n         }\n         </View>\n         <View style={styles(dimensions).submitButtonContainer}>\n            <CustomButton \n               buttonColor='red'\n               buttonText='Submit'\n               buttonTextColor='white'\n               onPress={async () => {\n                  let dataSubmittedStatus:Status = await validateAndSubmitDetails(name, description);\n                  switch(dataSubmittedStatus) {\n                     case Status.emptyField1:\n                        alert(`Please fill the name field!`);\n                     break;\n                     case Status.emptyField2:\n                        alert(`Please fill the description field!`)\n                     break;\n                     case Status.shortDetails:\n                        alert(`Description too short!`);\n                     break;\n                     case Status.successful:\n                        alert(`Data submitted successfully!`)\n                     break;\n                     default: alert(`Some error occurred!`)\n                  }\n               }}\n            />\n         </View>\n      </View>\n   )\n}\n\nexport default RequestScreen;","import React, { useState, useEffect } from 'react';\nimport { View, Text, Dimensions, ScaledSize, StyleSheet, useWindowDimensions } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport { FlatList, TouchableOpacity } from 'react-native-gesture-handler';\nimport database from '../configs/firebase.config';\nimport GLOBALS from '../constants/globals';\nimport { List, Divider } from 'react-native-paper';\nimport CustomButton from '../components/CustomButton';\nimport { useNavigation, DrawerActions, StackActions } from '@react-navigation/native';\n\ninterface ItemInterface {\n   name: string,\n   description: string,\n   timeStamp: Date\n}\n\ninterface Props {\n   navigation: any\n}\n\nfunction ExchangeScreen(props:Props) {\n\n   const [itemsList, setItemsList] = useState<any[]>([]);\n   const [lastItemFetchedTimestamp, setLastItemFetchedTimestamp] = useState<Date | null>(null);\n   const [docID, setDocID] = useState<string>();\n\n   const dimensions = useWindowDimensions();\n\n   const navigation = useNavigation();\n\n   useEffect(() => {\n      if(itemsList.length == 0) fetchItems(null)\n   }, []);\n\n   const styles = (dimensions: ScaledSize) => StyleSheet.create({\n      exchangeButtonContainer: {\n         height: '50%',\n         width: dimensions.width * 0.2\n      },\n      divider: {\n         backgroundColor: 'rgba(0,0,0,0.3)'\n      }\n   })\n\n   const fetchItems = (lastItemFetchedTimestamp?: Date | null) => {\n      try {\n         let dbRef;\n         lastItemFetchedTimestamp != null ?\n         dbRef = database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).where('sent', '==', false).orderBy('timeStamp').startAfter(lastItemFetchedTimestamp).limit(1)\n         :\n         dbRef = database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).where('sent', '==', false).limit(1)\n\n         dbRef\n            .onSnapshot(snapshot => {\n               let dataList = [];\n               dataList = snapshot.docs.map(doc => {\n                  let data = doc.data();\n                  data['docID'] = doc.id\n                  return data;\n               }); \n               console.log(dataList);\n               setItemsList(oldList => {\n                  oldList.push(...dataList);\n                  return oldList;\n               });\n               if(dataList.length > 0) setLastItemFetchedTimestamp((oldTimestamp) => dataList[dataList.length - 1].timeStamp);\n            })\n      } catch (e) {\n         alert(`Some error Occurred in fetching the data!`);\n         console.log(e);\n      }\n   }\n\n   const renderItem = ({ item, index }) => {\n      return (\n         <View>\n            <View>\n               <List.Item\n                  theme={{\n                     colors: {\n                        text: 'black'\n                     }\n                  }}\n                  left={(prop) => <List.Icon icon='table-furniture' color='black'/>}\n                  right={(prop) => (\n                     <View style={styles(dimensions).exchangeButtonContainer}>\n                        <CustomButton\n                           buttonText='Exchange'\n                           buttonTextColor='white'\n                           buttonColor='red'\n                           onPress={() => exchangeItem(item)}\n                        />\n                     </View>\n                  )}\n                  title={item.name}\n                  description={item.description}\n               />\n               <Divider style={styles(dimensions).divider} />\n            </View>\n         </View>\n      );\n   }\n\n   const exchangeItem = (item: any) => {\n      props.navigation.navigate('itemDetailScreen', {item: item, navigation: props.navigation});\n   }\n\n   let onEndReachedCalledDuringMomentum = true;\n\n   return (\n      <View>\n         <CustomAppBar title='Exchange Screen' color='#ffca28' drawerAvailable={true}/>\n         <View>\n            <FlatList\n               data={itemsList}\n               renderItem={renderItem}\n               keyExtractor={(item, index) => index.toString()}\n               onEndReachedThreshold={7}\n               onEndReached={() => {\n                  if(!onEndReachedCalledDuringMomentum) fetchItems(lastItemFetchedTimestamp)\n               }}\n               onMomentumScrollBegin={() => { onEndReachedCalledDuringMomentum = false; }}\n            />\n         </View>\n      </View>\n   )\n}\n\nexport default ExchangeScreen;","import React from 'react';\nimport { View, Text } from 'react-native';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport RequestScreen from './RequestScreen';\nimport ExchangeScreen from './ExchangeScreen';\nimport MaterialCommunityIcons from 'react-native-vector-icons/FontAwesome';\n\nfunction ExchangeViewTabNavigator() {\n\n   const BottomTab = createMaterialBottomTabNavigator();\n\n   return (\n      <BottomTab.Navigator\n         barStyle={{ backgroundColor: 'purple' }}\n      >\n         <BottomTab.Screen\n            name=\"exchangeScreen\"\n            component={ExchangeScreen}\n            options={{\n               tabBarLabel: 'Exchange Screen',\n               title: 'Exchange Items',\n               tabBarIcon: ({color}) => <MaterialCommunityIcons \n                  name='handshake-o'\n                  size={20}\n                  color={color}\n               />\n            }}\n         />\n         <BottomTab.Screen\n            name=\"requestScreen\"\n            component={RequestScreen}\n            options={{\n               tabBarLabel: 'Request Screen',\n               title: 'Request Items',\n               tabBarIcon: ({color}) => <MaterialCommunityIcons \n                  name='envelope-open'\n                  size={20}\n                  color={color}\n               />\n            }}\n         />\n      </BottomTab.Navigator>\n   )\n}\n\nexport default ExchangeViewTabNavigator;","import React, { useState, useEffect } from 'react';\nimport { Text, View, useWindowDimensions, StyleSheet, ScaledSize } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport CustomButton from '../components/CustomButton';\nimport database from '../configs/firebase.config';\nimport GLOBALS from '../constants/globals';\nimport firebase from 'firebase';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   maxLength?: number,\n   multiline?: boolean,\n   height?: number\n}\n\nfunction SettingsScreen() {\n\n   const [name, setName] = useState<string>('');\n   const [emailID, setEmailID] = useState<string>('');\n   const [address, setAddress] = useState<string>('');\n   const [contactNo, setContactNo] = useState<string>('');\n\n   const [userDocId, setUserDocId] = useState<string>('');\n\n   const windowDetails = useWindowDimensions();\n\n   useEffect(() => {\n      let currentUserEmail:string|null|undefined = firebase.auth().currentUser?.email;\n\n      if(currentUserEmail) {\n         getAndSetUserDetails(currentUserEmail);\n      } else {\n         alert('User not signed in');\n      }\n   }, []);\n\n   \n\n   const styles = (windowDetails:ScaledSize) => StyleSheet.create({\n      background: {\n         backgroundColor: '#CDDC39',\n         height: '100vh',      \n      },\n      textInputContainer: {\n         paddingTop: windowDetails.height / 50,\n         alignItems: 'center'\n      },\n      buttonContainer: {\n         paddingTop: windowDetails.height / 50,\n         paddingLeft: (windowDetails.width / 2) - ((windowDetails.width / 4) / 2),\n         paddingRight: (windowDetails.width / 2) - ((windowDetails.width / 4) / 2),\n      }\n   });\n\n   const firestore = GLOBALS.firebase.firestore;\n\n   const getAndSetUserDetails = (currentUserEmailID:string) => {\n      try {\n         database.collection(firestore.collections.names.users).where('emailID', '==', currentUserEmailID).limit(1) //get unique result\n         .onSnapshot(\n            (snapshot) => {\n               snapshot.docs.map(doc => {\n   \n                  setUserDocId(doc.id);\n   \n                  let data = doc.data();\n   \n                  setName(data.name);\n                  setEmailID(data.emailID);\n                  setAddress(data.address);\n                  setContactNo(data.contactNo);\n   \n               })\n            }\n         )\n      } catch(e) {\n         console.error(e);\n         alert(`Some error occurred while fetching the details.`)\n      }\n      \n   }\n\n   const updateProfile = (name:string, emailID:string, address:string, contactNo:string) => {\n\n      try {\n         database.collection(firestore.collections.names.users).doc(userDocId).update({\n            name: name,\n            emailID: emailID,\n            address: address,\n            contactNo: contactNo,\n         });\n         alert(`User details updated successfully`)\n      } catch(e) {\n         console.error(e);\n         alert(`Some error occured in saving the user details`);\n      }\n   }\n\n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Email ID',\n         onChangeText: (text:string) => setEmailID(text),\n         value: emailID,\n      },\n      {\n         placeholder: 'Address',\n         onChangeText: (text:string) => setAddress(text),\n         value: address,\n      },\n      {\n         placeholder: 'Contact No.',\n         onChangeText: (text:string) => setContactNo(text),\n         value: contactNo,\n      },\n   ]\n\n   return (\n      <View style={styles(windowDetails).background}>\n         <CustomAppBar title='Settings Screen' color='#1e9c91' drawerAvailable={true}/>\n         <View>\n            <View>\n               {\n                  textInputDetails.map(detail => {\n                     return (\n                        <View style={styles(windowDetails).textInputContainer}>\n                           <CustomTextInput \n                              placeholder={detail.placeholder}\n                              onChangeText={detail.onChangeText}\n                              value={detail.value}\n                              obscureText={false}\n                              outlinedBorder={true}\n                              height={windowDetails.height / 12}\n                              width={windowDetails.width / 2}\n                           />\n                        </View>\n                     )\n                  })\n               }\n            </View>\n            <View style={styles(windowDetails).buttonContainer}>\n               <CustomButton \n                 buttonColor='rgba(88,111,121,1.0)'\n                 buttonText='Submit'\n                 buttonTextColor='white'\n                 onPress={() => updateProfile(name, emailID, address, contactNo)} \n               />\n            </View>\n         </View>\n      </View>\n   );\n}\n\nexport default SettingsScreen;","import React, { useState, useEffect } from 'react';\nimport { View, FlatList, ScaledSize, useWindowDimensions } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport { List, Divider } from 'react-native-paper';\nimport CustomButton from '../components/CustomButton';\nimport database from '../configs/firebase.config';\nimport GLOBALS from '../constants/globals';\nimport firebase from 'firebase';\n\nfunction MyBartersScreen() {\n\n   const [myBarters, setMyBarters] = useState<any[]>([]);\n\n   const dimensions = useWindowDimensions();\n\n   useEffect(() => {\n\n      let bartersList:any[] = [];\n\n      let currentUserEmail:string | null | undefined = firebase.auth().currentUser?.email;\n\n      try {\n         const firestore = GLOBALS.firebase.firestore;\n\n         if(onEndReachedCalledDuringMomentum) {\n            if(currentUserEmail) {\n               database.collection(firestore.collections.names.barters).where(firestore.collections.barters.names.donorID,'==', currentUserEmail)\n               .onSnapshot((snapshot) => {\n                  snapshot.docs.map(doc => {\n                     let data = doc.data();\n                     bartersList.push(data);\n                  });\n                  // console.log(`Barters list: ${bartersList}`)\n                  setMyBarters(bartersList);\n               });\n            } else {\n               alert(`User not signed in`);\n            }\n         }\n      \n      } catch(e) {\n         console.error(e);\n         alert(`Some error occurred in fetching the barters`);\n      }\n\n   }, []);\n\n   const styles = (dimensions:ScaledSize) => {\n\n   }\n\n   const updateItemInDatabase = async (item:any) => {\n      await database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).doc(item.docID).update({\n         sent: true\n      });\n\n      await database.collection(GLOBALS.firebase.firestore.collections.names.barters).doc(item.docID).update({\n         status: 'sent'\n      });\n\n      await database.collection(GLOBALS.firebase.firestore.collections.names.notifications).doc(item.docID).set({\n         docID: item.docID,\n         receiverID: item.receiverID,\n         donorID: item.donorID,\n         itemName: item.itemName,\n         itemDescription: item.itemDescription,\n         read: false\n      })\n\n      alert(`Item ${item.itemName} sent to ${item.receiverID}`);\n   }\n\n   const renderItem = ({ item, index }) => {\n      return (\n         <View>\n            <List.Item\n               theme={{\n                  colors: {\n                     text: 'black'\n                  }\n               }}\n               left={(prop) => <List.Icon icon='table-furniture' color='black' />}\n               right={(prop) => (\n                  <View>\n                     <CustomButton\n                        buttonText='Send'\n                        buttonTextColor='white'\n                        buttonColor='red'\n                        onPress={() => updateItemInDatabase(item)}\n                     />\n                  </View>\n               )}\n               title={item.itemName}\n               description={`Status: ${item.status}`}\n            />\n            <Divider />\n         </View>\n      )\n   }\n\n   let onEndReachedCalledDuringMomentum = true;\n\n   return (\n      <View>\n         <CustomAppBar title='My Barters Screen' drawerAvailable={true} />\n         <View>\n            <FlatList\n               data={myBarters}\n               keyExtractor={(item, index) => index.toString()}\n               renderItem={renderItem}\n               onMomentumScrollBegin={() => { onEndReachedCalledDuringMomentum = false; }}\n            />\n         </View>\n      </View>\n   );\n}\n\nexport default MyBartersScreen;","import React from 'react';\nimport { View, Text, ScaledSize, StyleSheet, useWindowDimensions } from 'react-native';\nimport CustomAppBar from '../../components/CustomAppBar';\nimport { useRoute } from '@react-navigation/native';\nimport { Card } from 'react-native-elements';\nimport CustomButton from '../../components/CustomButton';\n\nimport database from '../../configs/firebase.config';\nimport GLOBALS from '../../constants/globals';\nimport firebase from 'firebase';\n\ninterface ItemDetail {\n   keyName: string,\n   itemKeyNameInItemObject: string\n}\n\nfunction ItemDetailScreen() {\n   const route = useRoute();\n   const dimensions = useWindowDimensions();\n\n   const { item }:any = route.params;\n   const { navigation }:any = route.params;\n\n   const itemDetailsList:ItemDetail[] = [\n      {\n         keyName: 'Item Name',\n         itemKeyNameInItemObject: 'name'\n      },\n      {\n         keyName: 'Item Description',\n         itemKeyNameInItemObject: 'description'\n      },\n      {\n         keyName: 'Time of Request',\n         itemKeyNameInItemObject: 'timeStamp'\n      },\n      {\n         keyName: 'Reciever ID',\n         itemKeyNameInItemObject: 'userID'\n      }\n   ]\n   const styles = (dimensions:ScaledSize) => StyleSheet.create({\n      itemKey: {\n         fontWeight: 'bold',\n         fontSize: 20\n      },\n      itemValue: {\n         fontSize: 20\n      },\n      sendButtonContainer: {\n         paddingTop: 20,\n         paddingRight: dimensions.width / 2 - ((dimensions.width / 3) / 2),\n         paddingLeft: dimensions.width / 2 - ((dimensions.width / 3) / 2),\n      }\n   });\n\n   const updateItemStatusAndNavigate = () => {\n      navigation.navigate('myBartersScreen');\n\n      database.collection(GLOBALS.firebase.firestore.collections.names.barters).doc(item.docID).set({\n         donorID: firebase.auth().currentUser?.email,\n         receiverID: item.userID,\n         itemName: item.name,\n         itemDescription: item.description,\n         status: 'notSent',\n         docID: item.docID\n      });\n   }\n   \n   return (\n      <View>\n         <CustomAppBar title='Item Details Screen' backButtonAvailable={true} />\n         <View>\n            {\n               itemDetailsList.map(detail => {\n                  return (\n                     <View>\n                        <Card containerStyle={{borderRadius: 15.0}}>\n                           <Text style={styles(dimensions).itemValue}>\n                              <Text style={styles(dimensions).itemKey}>{detail.keyName}: </Text>\n                              {item[detail.itemKeyNameInItemObject].toString()}\n                           </Text>\n                        </Card>\n                     </View>\n                  )\n               })\n            }\n            <View>\n               <View style={styles(dimensions).sendButtonContainer}>\n                  <CustomButton onPress={updateItemStatusAndNavigate} buttonColor='red' buttonText='Send' buttonTextColor='white'/>\n               </View>\n            </View>\n         </View>\n      </View>\n   )\n}\n\nexport default ItemDetailScreen;","import React, { useState, useEffect } from 'react';\nimport { View, Text, ScaledSize, useWindowDimensions, StyleSheet, Animated } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport { List, Divider } from 'react-native-paper';\nimport CustomButton from '../components/CustomButton';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport database from '../configs/firebase.config';\nimport GLOBALS from '../constants/globals';\nimport firebase from 'firebase';\nimport { ListItem, Icon } from 'react-native-elements';\n\nfunction NotificationsScreen() {\n\n   const [notifications, setNotifications] = useState<any[]>([]);\n\n   const dimensions = useWindowDimensions();\n\n   useEffect(() => {\n\n      let notificationsList: any[] = [];\n\n      let currentUserEmail: string | null | undefined = firebase.auth().currentUser?.email;\n\n      try {\n         const firestore = GLOBALS.firebase.firestore;\n\n         if (onEndReachedCalledDuringMomentum) {\n            if (currentUserEmail) {\n               database.collection(firestore.collections.names.notifications).where('receiverID', '==', currentUserEmail).where('read', '==', false)\n                  .onSnapshot((snapshot) => {\n                     snapshot.docs.map(doc => {\n                        let data = doc.data();\n                        notificationsList.push(data);\n                     });\n\n                     setNotifications(notificationsList);\n                  });\n            } else {\n               alert(`User not signed in`);\n            }\n         }\n\n      } catch (e) {\n         console.error(e);\n         alert(`Some error occurred in fetching the barters`);\n      }\n\n   }, []);\n\n   const styles = (dimensions: ScaledSize) => StyleSheet.create({\n      rowBehind: {\n         alignItems: \"center\",\n         backgroundColor: \"#29b6f6\",\n         flex: 1,\n         flexDirection: \"row\",\n         justifyContent: \"space-between\",\n         paddingLeft: 15\n      },\n      container: {\n         backgroundColor: \"white\",\n         flex: 1\n      },\n      backTextWhite: {\n         color: \"#FFF\",\n         fontWeight: \"bold\",\n         fontSize: 15,\n         textAlign: \"center\",\n         alignSelf: \"flex-start\"\n      },\n      rowBack: {\n         alignItems: \"center\",\n         backgroundColor: \"#29b6f6\",\n         flex: 1,\n         flexDirection: \"row\",\n         justifyContent: \"space-between\",\n         paddingLeft: 15\n      },\n      backRightBtn: {\n         alignItems: \"center\",\n         bottom: 0,\n         justifyContent: \"center\",\n         position: \"absolute\",\n         top: 0,\n         width: 100\n      },\n      backRightBtnRight: {\n         backgroundColor: \"#29b6f6\",\n         right: 0\n      }\n   })\n\n   const markNotificationAsReadAndRemoveItem = (swipeData) => {\n\n      const { key, value } = swipeData;\n\n      if ((value > dimensions.width || value < -dimensions.width) && notifications[key] != undefined) {\n         let docID: string = notifications[key].docID;\n\n         let newData = [...notifications];\n\n         newData.splice(key, 1);\n         setNotifications(newData);\n         database.collection(GLOBALS.firebase.firestore.collections.names.notifications).doc(docID).update({\n            read: true\n         })\n      }\n\n   }\n\n   const renderItem = ({ item, index }) => {\n      return (\n         <Animated.View>\n            <ListItem\n               key={index}\n               bottomDivider\n            >\n               <ListItem.Chevron>\n                  <Icon name=\"notification\" type=\"font-awesome\" color='#696969' size={50} />\n               </ListItem.Chevron>\n               <ListItem.Content>\n                  <ListItem.Title style={{ color: 'black', fontWeight: 'bold' }}>{item.itemName}</ListItem.Title>\n                  <ListItem.Subtitle>{'Donor interested'}</ListItem.Subtitle>\n               </ListItem.Content>\n            </ListItem>\n            <Divider />\n         </Animated.View>\n      )\n   }\n\n   const renderHiddenItem = () => {\n      return (\n         <View style={styles(dimensions).rowBack}>\n            <View style={[styles(dimensions).backRightBtn, styles(dimensions).backRightBtnRight]}>\n               <Text style={styles(dimensions).backTextWhite}>Mark as read</Text>\n            </View>\n         </View>\n      );\n   }\n\n   let onEndReachedCalledDuringMomentum = true;\n\n   return (\n      <View>\n         <CustomAppBar title='Notifications Screen' drawerAvailable={true} displayNotifications={false}/>\n         <View>\n            <SwipeListView\n               data={notifications}\n               keyExtractor={(item, index) => index.toString()}\n               renderItem={renderItem}\n               disableLeftSwipe\n               leftOpenValue={dimensions.width}\n               renderHiddenItem={renderHiddenItem}\n               onSwipeValueChange={markNotificationAsReadAndRemoveItem}\n               onMomentumScrollBegin={() => { onEndReachedCalledDuringMomentum = false; }}\n               previewRowKey={\"0\"}\n               previewOpenValue={-40}\n               previewOpenDelay={3000}\n            />\n         </View>\n      </View>\n   );\n}\n\nexport default NotificationsScreen;","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Platform, Dimensions, ScaledSize, useWindowDimensions } from 'react-native';\nimport database from './configs/firebase.config';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator, DrawerContentComponentProps, DrawerContentOptions, DrawerContent } from '@react-navigation/drawer';\nimport { DrawerItems } from 'react-navigation-drawer';\n\n//screens and assets\nimport LoginScreen from './screens/LoginScreen';\nimport { Provider } from 'react-native-paper';\nimport ExchangeViewTabNavigator from './screens/ ExchangeViewTabNavigator';\nimport CustomButton from './components/CustomButton';\nimport firebase from 'firebase';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { NavigationActions } from 'react-navigation';\nimport { Icon } from 'react-native-elements';\nimport SettingsScreen from './screens/SettingsScreen';\nimport MyBartersScreen from './screens/MyBartersScreen';\nimport ItemDetailScreen from './screens/secondary/ItemDetailScreen';\nimport NotificationsScreen from './screens/NotificationsScreen';\n\ninterface DrawerScreenInfo {\n\tname: string,\n\tcomponent: any\n}\n\ninterface StackScreenInfo {\n\tname: string,\n\tcomponent: any\n}\n\nfunction Root() {\n\tconst Stack = createStackNavigator();\n\n\tconst defaultOptions = {\n\t\theaderShown: false\n\t}\n\n\tconst stackScreenInfoList:StackScreenInfo[] = [\n\t\t{\n\t\t\tname: 'loginScreen',\n\t\t\tcomponent: LoginScreen,\n\t\t},\n\t\t{\n\t\t\tname: 'homeScreen',\n\t\t\tcomponent: ExchangeViewTabNavigator,\n\t\t},\n\t\t{\n\t\t\tname: 'itemDetailScreen',\n\t\t\tcomponent: ItemDetailScreen,\n\t\t},\n\t\t{\n\t\t\tname: 'myBartersScreen',\n\t\t\tcomponent: MyBartersScreen,\n\t\t},\n\t\t{\n\t\t\tname: 'notificationsScreen',\n\t\t\tcomponent: NotificationsScreen,\n\t\t}\n\t];\n\n\treturn (\n\t\t<Stack.Navigator initialRouteName='loginScreen'>\n\t\t\t{\n\t\t\t\tstackScreenInfoList.map(detail => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Stack.Screen \n\t\t\t\t\t\t\tname={detail.name}\n\t\t\t\t\t\t\tcomponent={detail.component}\n\t\t\t\t\t\t\toptions={defaultOptions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</Stack.Navigator>\n\n\t)\n}\n\nexport default function App() {\n\n\t// if(database) database.enablePersistence();\n\tconst dimensions = useWindowDimensions();\n\n\tconst Drawer = createDrawerNavigator();\n\n\tconst defaultOptions = {\n\t\theaderShown: false\n\t}\n\n\tconst styles = (dimensions: ScaledSize) => StyleSheet.create({\n\t\tdrawer: {\n\t\t\tborderTopRightRadius: 20,\n\t\t\tborderBottomRightRadius: 20,\n\t\t},\n\t\tdrawerContent: {\n\t\t\tflex: 1\n\t\t},\n\t\tlogOutButton: {\n\t\t\tflex: 1,\n\t\t\tjustifyContent: 'flex-end',\n\t\t\tpaddingLeft: '5%',\n\t\t\tpaddingBottom: '5%'\n\t\t},\n\t\tlogOutButtonContent: {\n\t\t\tflexDirection: 'row',\n\t\t\talignItems: 'center'\n\t\t},\n\t\tlogOutButtonText: {\n\t\t\tpaddingLeft: '3%',\n\t\t\tfontWeight: 'bold',\n\t\t\tfontSize: 15\n\t\t}\n\t})\n\n\n\tconst logOutUserAndNavigateToLoginScreen = async (navigation: any) => {\n\t\tawait firebase.auth().signOut();\n\t\tnavigation.navigate('loginScreen');\n\t}\n\n\tconst drawerScreenInfoList:DrawerScreenInfo[] = [\n\t\t{\n\t\t\tname: 'Home',\n\t\t\tcomponent: Root,\n\t\t},\n\t\t{\n\t\t\tname: 'Settings',\n\t\t\tcomponent: SettingsScreen,\n\t\t},\n\t\t{\n\t\t\tname: 'My Barters',\n\t\t\tcomponent: MyBartersScreen,\n\t\t},\n\t\t,\n\t\t{\n\t\t\tname: 'Notifications',\n\t\t\tcomponent: NotificationsScreen,\n\t\t}\n\t];\n\n\treturn (\n\t\t<Provider>\n\t\t\t<NavigationContainer>\n\t\t\t\t<Drawer.Navigator\n\t\t\t\t\tinitialRouteName='homeScreen'\n\t\t\t\t\tdrawerStyle={styles(dimensions).drawer}\n\t\t\t\t\tdrawerContent={(options) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<View style={styles(dimensions).drawerContent}>\n\t\t\t\t\t\t\t\t<DrawerContent\n\t\t\t\t\t\t\t\t\tstate={options.state}\n\t\t\t\t\t\t\t\t\tnavigation={options.navigation}\n\t\t\t\t\t\t\t\t\tdescriptors={options.descriptors}\n\t\t\t\t\t\t\t\t\tprogress={options.progress}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<View style={styles(dimensions).logOutButton}>\n\t\t\t\t\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\t\t\t\t\tonPress={() => logOutUserAndNavigateToLoginScreen(options.navigation)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<View style={styles(dimensions).logOutButtonContent}>\n\t\t\t\t\t\t\t\t\t\t\t<Icon name='power-off' type='font-awesome'/>\n\t\t\t\t\t\t\t\t\t\t\t<Text style={styles(dimensions).logOutButtonText}>Log Out</Text>\n\t\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t\tdrawerType='front'\n\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tdrawerScreenInfoList.map(detail => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Drawer.Screen \n\t\t\t\t\t\t\t\t\tname={detail.name}\n\t\t\t\t\t\t\t\t\tcomponent={detail.component}\n\t\t\t\t\t\t\t\t\toptions={defaultOptions}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</Drawer.Navigator>\n\t\t\t</NavigationContainer>\n\t\t</Provider>\n\t)\n\n}\n\nexport const injectWebCss = () => {\n\n\t// Only on web\n\tif (Platform.OS != 'web') return\n\n\t// Inject style\n\tconst style = document.createElement('style')\n\tstyle.textContent = `textarea, select, input, button { outline: none!important; }`\n\treturn document.head.append(style)\n\n}\n\ninjectWebCss()"],"sourceRoot":""}