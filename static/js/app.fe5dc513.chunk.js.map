{"version":3,"sources":["configs/firebase.config.ts","components/CustomAppBar.tsx","components/CustomTextInput.tsx","components/CustomButton.tsx","constants/status.ts","constants/globals.ts","screens/LoginScreen.tsx","screens/RequestScreen.tsx","screens/ExchangeScreen.tsx","screens/ ExchangeViewTabNavigator.tsx","App.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","CustomAppBar","props","Appbar","Header","style","backgroundColor","color","Content","title","alignItems","StyleSheet","create","centerComponent","fontSize","CustomTextInput","TextInput","placeholder","styles","textInput","onChangeText","value","secureTextEntry","obscureText","multiline","maxLength","undefined","width","height","padding","borderBottomWidth","outlinedBorder","borderColor","borderWidth","borderRadius","CustomButton","TouchableOpacity","button","onPress","Text","buttonText","Status","buttonColor","justifyContent","paddingHorizontal","paddingVertical","shadowOpacity","shadowRadius","shadowOffset","elevation","buttonTextColor","fontWeight","fontFamily","collections","names","users","itemsToExchange","LoginScreen","useEffect","Dimensions","addEventListener","window","screen","setDimensions","useState","get","dimensions","email","setEmail","password","setPassword","modalVisible","setModalVisible","emailIDInModal","setEmailIDInModal","address","setAddress","contactNo","setContactNo","name","setName","textInputDetails","buttonDetails","a","async","authenticateUserWithEmailAndPassword","authStatus","emptyField1","emptyField2","emailBadlyFormatted","badCredentials","successful","userNotFound","userDisabled","alert","navigation","replace","signUpUser","emailAlreadyInUse","weakPassword","operationNotAllowed","signUpModalDetailsTextInput","text","modalButtonDetails","setUserDetailsInFirestore","userDetailsRegisteredStatus","navigate","background","modal","marginLeft","marginTop","modalContent","modalHeadingContainer","modalHeading","modalButtonGroupContainer","paddingTop","modalButtonContainer","paddingBottom","imageContainer","avatar","detailsContainer","textInputContainer","buttonContainer","validateCredentials","trim","length","EmailValidator","validate","credentialsValidStatus","auth","signInWithEmailAndPassword","console","error","errCode","code","unknownError","createUserWithEmailAndPassword","emailID","database","collection","GLOBALS","add","View","Portal","Modal","dismissable","visible","contentContainerStyle","map","detail","rounded","overlayContainerStyle","size","icon","type","RequestScreen","description","setDescription","allTextInputsContainer","paddingLeft","submitButtonContainer","paddingRight","validateAndSubmitDetails","log","shortDetails","timeStamp","Timestamp","now","then","res","catch","err","dataSubmittedStatus","ExchangeScreen","itemsList","setItemsList","lastItemFetchedTimestamp","setLastItemFetchedTimestamp","fetchItems","exchangeButtonContainer","divider","orderBy","startAfter","limit","onSnapshot","snapshot","dataList","JSON","stringify","docs","doc","data","oldList","push","oldTimestamp","e","exchangeItem","item","renderItem","index","Item","theme","colors","left","prop","Icon","right","Divider","keyExtractor","toString","onEndReachedThreshold","onEndReached","ExchangeViewTabNavigator","BottomTab","createMaterialBottomTabNavigator","Navigator","barStyle","Screen","component","options","tabBarLabel","tabBarIcon","App","enablePersistence","Stack","createStackNavigator","defaultOptions","headerShown","Provider","NavigationContainer","initialRouteName","Platform","OS","document","createElement","textContent","head","append","injectWebCss"],"mappings":"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","file":"static/js/app.fe5dc513.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n   apiKey: \"AIzaSyCtJWEiHkscsBR9mhAV8PzPn7Ijy46bOdI\",\n   authDomain: \"barter-app-1d780.firebaseapp.com\",\n   projectId: \"barter-app-1d780\",\n   storageBucket: \"barter-app-1d780.appspot.com\",\n   messagingSenderId: \"544892223600\",\n   appId: \"1:544892223600:web:7f83694a6daecd2992f4b5\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase.firestore();","import React from 'react';\nimport { StyleSheet, Text, View, ColorValue } from 'react-native';\nimport { Appbar } from 'react-native-paper';\n\ninterface Props {\n   title:string,\n   color?: ColorValue\n}\n\nexport default function CustomAppBar(props: Props) {\n   return(\n      <Appbar.Header\n         style={{backgroundColor: props.color ? props.color:'#6d4c41'}}\n      >\n         <Appbar.Content title={props.title} style={{alignItems: \"center\"}}/>\n      </Appbar.Header>\n   );\n}\n\nconst styles = StyleSheet.create({\n   centerComponent: {\n      fontSize: 20\n   }\n})","import React from 'react';\nimport { StyleSheet, TextInput } from 'react-native';\nimport { Input } from 'react-native-elements';\n\nexport interface Props {\n   placeholder:string,\n   width: number,\n   height?: number,\n   onChangeText: (text:string) => void,\n   value: string,\n   obscureText: boolean,\n   multiline?: boolean,\n   maxLength?: number,\n   outlinedBorder?:boolean\n}\n\nexport default function CustomTextInput(props:Props) {\n   return (\n      <TextInput \n         placeholder={props.placeholder}\n         style={styles(props).textInput}\n         onChangeText={props.onChangeText}\n         value={props.value}\n         secureTextEntry={props.obscureText}\n         multiline={props.multiline || false}\n         maxLength={props.maxLength || undefined}\n      />\n   );\n}\n\nconst styles = (props:Props) => StyleSheet.create({\n   textInput: {\n      width: props.width,\n      height: props.height || undefined,\n      fontSize: 23,\n      padding: 3,\n      borderBottomWidth: props.outlinedBorder ? undefined:2,\n      borderColor: 'black',\n      borderWidth: props.outlinedBorder ? 5:undefined,\n      borderRadius: props.outlinedBorder ? 25:0\n   }\n})","import React, { } from 'react';\nimport { TouchableOpacity, Text, StyleSheet, ColorValue } from 'react-native';\nimport { Colors } from 'react-native-elements';\n\ninterface Props {\n   buttonText:string,\n   buttonColor: ColorValue,\n   buttonTextColor: ColorValue,\n   onPress: () => void\n}\n\nexport default function CustomButton (props:Props) {\n   return (\n      <TouchableOpacity\n         style={styles(props).button}\n         onPress={props.onPress}\n      >\n         <Text style={styles(props).buttonText}>{props.buttonText}</Text>\n      </TouchableOpacity>\n   );\n}\n\nconst styles = (props:Props) => StyleSheet.create({\n   button: {\n      backgroundColor: props.buttonColor,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 23,\n      paddingHorizontal: 7,\n      paddingVertical: 5,\n      shadowOpacity: 0.5,\n      shadowRadius: 2.0,\n      shadowOffset: {\n         width: 0.0,\n         height: 4.0\n      },\n      elevation: 20\n   },\n   buttonText: {\n      fontSize: 23,\n      color: props.buttonTextColor,\n      fontWeight: 'bold',\n      fontFamily: 'cursive'\n   }\n})","enum Status {\n   successful,\n   unknownError,\n   badCredentials,\n   emptyField1,\n   emptyField2,\n   emailBadlyFormatted,\n   userNotFound,\n   userDisabled,\n   operationNotAllowed,\n   weakPassword,\n   emailAlreadyInUse,\n   shortDetails\n} \n\nexport default Status;","export default {\n   firebase: {\n      firestore: {\n         collections: {\n            names: {\n               users: 'users',\n               itemsToExchange: 'itemsToExchange'\n            }\n         }\n      }\n   }\n}","import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, ScaledSize, Dimensions, ColorValue } from \"react-native\";\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport { Avatar } from 'react-native-elements';\nimport CustomButton from '../components/CustomButton';\nimport EmailValidator from 'email-validator';\nimport { Modal, Portal } from 'react-native-paper';\n\nimport firebase from 'firebase';\nimport database from '../configs/firebase.config';\n\nimport GLOBALS from '../constants/globals';\nimport Status from '../constants/status';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   obscureText?: boolean\n}\n\ninterface ButtonDetail {\n   buttonText:string,\n   onPress: () => void,\n   buttonColor: ColorValue\n}\n\ninterface Props {\n   navigation: any,\n}\n\nexport default function LoginScreen(props:Props) {\n\n   useEffect(() => {\n      Dimensions.addEventListener('change', ({ window, screen }: { window: ScaledSize; screen: ScaledSize }) => {\n         setDimensions(window);\n      });\n   });\n\n   let [ dimensions, setDimensions ] = useState<ScaledSize>(Dimensions.get('window'));\n   \n   let [ email, setEmail ] = useState<string>('');\n   let [ password, setPassword ] = useState<string>('');\n\n   let [ modalVisible, setModalVisible ] = useState<boolean>(false);\n   let [ emailIDInModal, setEmailIDInModal ] = useState<string>('');\n   let [ address, setAddress ] = useState<string>('');\n   let [ contactNo, setContactNo ] = useState<string>('');\n   let [ name, setName ] = useState<string>('');\n\n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder:'Email',\n         onChangeText: (email:string) => setEmail(email),\n         value: email,\n      },\n      {\n         placeholder:'Password',\n         onChangeText: (password:string) => setPassword(password),\n         value: password,\n         obscureText: true\n      }\n   ]\n\n   let buttonDetails:ButtonDetail[] = [\n      {\n         buttonColor: '#4CAF50',\n         buttonText: 'Sign In',\n         onPress: async () => {\n            let authStatus:Status = await authenticateUserWithEmailAndPassword(email, password);\n\n            switch(authStatus) {\n               case Status.emptyField1:\n                  alert(`Empty email`)\n               break;\n               case Status.emptyField2:\n                  alert(`Empty password`)\n               break;\n               case Status.emailBadlyFormatted:\n                  alert(`Email badly formatted`)\n               break;\n               case Status.badCredentials:\n                  alert(`Wrong credentials`);\n               break;\n               case Status.successful:\n                  props.navigation.replace('exchangeViewTabNavigator')\n               break;\n               case Status.userNotFound:\n                  alert(`User not found`)\n               break;\n               case Status.userDisabled:\n                  alert(`User disabled`)\n               break;\n               default: alert(`Some unknown error occurred`)\n            }\n         }\n      },\n      {\n         buttonColor: '#3F51B5',\n         buttonText: 'Sign Up',\n         onPress: async () => {\n            let authStatus:Status = await signUpUser(email, password);\n\n            switch(authStatus) {\n               case Status.emptyField1:\n                  alert(`Empty email`)\n               break;\n               case Status.emptyField2:\n                  alert(`Empty password`)\n               break;\n               case Status.emailBadlyFormatted:\n                  alert(`Email badly formatted`)\n               break;\n               case Status.successful:\n                  // alert(`User added successfully`)\n                  setModalVisible(true);\n               break;\n               case Status.emailAlreadyInUse:\n                  alert(`Email already in use`)\n               break;\n               case Status.weakPassword:\n                  alert(`Weak password`)\n               break;\n               case Status.operationNotAllowed:\n                  alert(`Operation not allowed`)\n               break;\n               default: alert(`Some unknown error occurred`)\n            }\n         }\n      }\n   ]\n\n   let signUpModalDetailsTextInput:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Email ID',\n         onChangeText: (text:string) => setEmailIDInModal(text),\n         value: emailIDInModal,\n      },\n      {\n         placeholder: 'Address',\n         onChangeText: (text:string) => setAddress(text),\n         value: address,\n      },\n      {\n         placeholder: 'Contact No.',\n         onChangeText: (text:string) => setContactNo(text),\n         value: contactNo,\n      }\n   ]\n\n   let modalButtonDetails:ButtonDetail[] = [\n      {\n         buttonText: 'Submit',\n         buttonColor: 'purple',\n         onPress: async () => {\n            setModalVisible(false);\n            let userDetailsRegisteredStatus:Status = await setUserDetailsInFirestore(name, emailIDInModal, address, contactNo);\n            \n            switch (userDetailsRegisteredStatus) {\n               case Status.successful:\n                  props.navigation.navigate('exchangeViewTabNavigator')\n               break;\n               default:\n                  alert(`Some Error Occurred`);\n            }\n         }\n      },\n      {\n         buttonText: 'Cancel',\n         buttonColor: 'red',\n         onPress: () => setModalVisible(false)\n      }\n   ] \n\n   const styles = (dimensions: ScaledSize) => StyleSheet.create({\n      background: {\n         backgroundColor:'#F8BE85',\n         height: '100vh',      \n      }, \n      modal: {\n         marginLeft: dimensions.width / 2 - ((dimensions.width / 2) / 2), // dimensions.width / 2 is the width of the modal\n         marginTop: dimensions.height / 2 - ((dimensions.height / 2) / 2), // dimensions.height / 2 is the width of the modal\n         width: dimensions.width / 2,\n         height: dimensions.height / 1.9,\n         shadowOpacity: 0.5,\n         shadowRadius: 2.0,\n         shadowOffset: {\n            width: 0.0,\n            height: 6.0\n         },\n         elevation: 20.0,\n         backgroundColor: '#FFC107',\n         borderRadius: 20.0,\n      },\n      modalContent: {\n         justifyContent: 'flex-start',\n         alignItems: 'center',\n         height: '100%',\n         width: '100%',\n         borderRadius: 20.0\n      },\n      modalHeadingContainer: {\n         paddingVertical: 1,\n         alignItems: 'center',\n         width: '100%',\n      },\n      modalHeading: {\n         fontFamily: 'cursive',\n         fontSize: 30,\n         fontWeight: 'bold'\n      },\n      modalButtonGroupContainer: {\n         paddingTop: 5,\n      },\n      modalButtonContainer: {\n         paddingBottom: dimensions.height / 60,\n      },\n      imageContainer: {\n         paddingVertical: 20,\n         justifyContent: \"center\",\n         alignItems: 'center',\n      },\n      avatar: {\n         backgroundColor: 'white', \n         borderWidth: 5\n      },\n      detailsContainer: {\n         width: '100%',\n         alignItems: 'center'\n      },\n      textInputContainer: {\n         paddingTop: 20,\n      },\n      buttonContainer: {\n         paddingTop: 15,\n      }\n   })\n\n   const validateCredentials = (email:string, password:string):Status => {\n      if(email == null || email.trim().length == 0) return Status.emptyField1\n      if(password == null || password.trim().length == 0) return Status.emptyField2\n      if(!EmailValidator.validate(email)) return Status.emailBadlyFormatted\n      return Status.successful;\n   }\n   \n   const authenticateUserWithEmailAndPassword = async (email:string, password: string) => {\n      let credentialsValidStatus:Status = validateCredentials(email, password);\n      if(credentialsValidStatus != Status.successful) return credentialsValidStatus;\n   \n      try {\n         await firebase.auth().signInWithEmailAndPassword(email, password);\n         return Status.successful;\n      } catch(err) {\n         console.error(err);\n         let errCode = err.code;\n   \n         switch(errCode) {\n            case 'auth/wrong-password':\n               return Status.badCredentials\n            break;\n            case 'auth/user-not-found':\n               return Status.userNotFound\n            break;\n            case 'auth/user-disabled':\n               return Status.userDisabled\n            break;\n            case 'auth/invalid-email':\n               return Status.emailBadlyFormatted\n            break;\n            default: return Status.unknownError\n         } \n      };\n   }\n   \n   const signUpUser = async (email:string, password: string):Promise<Status> => {\n      \n      let credentialsValidStatus:Status = validateCredentials(email, password);\n      if(credentialsValidStatus != Status.successful) return credentialsValidStatus;\n   \n      try {\n         await firebase.auth().createUserWithEmailAndPassword(email, password);\n         return Status.successful;\n      } catch(err) {\n         console.error(err);\n         let errCode = err.code;\n   \n         switch(errCode) {\n            case 'auth/email-already-in-use':\n               return Status.emailAlreadyInUse\n            break;\n            case 'auth/invalid-email':\n               return Status.emailBadlyFormatted\n            break;\n            case 'auth/operation-not-allowed':\n               return Status.operationNotAllowed\n            break;\n            case 'auth/weak-password':\n               return Status.weakPassword\n            break;\n            default: return Status.unknownError\n         } \n      };\n   }\n\n   const setUserDetailsInFirestore = async (name:string, emailID:string, address:string, contactNo:string):Promise<Status> => {\n      try {\n         const res = await database.collection(GLOBALS.firebase.firestore.collections.names.users).add({\n            name: name,\n            emailID: emailID,\n            address: address,\n            contactNo: contactNo\n         });\n         return Status.successful;\n      } catch (err) {\n         console.error(err);\n         return Status.unknownError;\n      }\n   }\n\n   return (\n      <View style={styles(dimensions).background}>\n         <View>\n            <CustomAppBar title='Login'/>\n               <Portal>\n                  <Modal\n                     dismissable={false}\n                     visible={modalVisible}\n                     contentContainerStyle={styles(dimensions).modalContent}\n                     style={styles(dimensions).modal}\n                  >\n                     <View style={styles(dimensions).modalHeadingContainer}>\n                        <Text style={styles(dimensions).modalHeading}>\n                           Information:\n                        </Text>\n                     </View>\n                     <View>\n                        {\n                           signUpModalDetailsTextInput.map((detail:TextInputDetail) => {\n                              return (\n                                 <View>\n                                    <CustomTextInput \n                                       placeholder={detail.placeholder}\n                                       onChangeText={detail.onChangeText}\n                                       value={detail.value}\n                                       obscureText={false}\n                                       width={(dimensions.width / 2) / 2} //dimensions.width / 2 is the width of the modal\n                                    />\n                                 </View>\n                              )\n                           })\n                        }\n                        <View style={styles(dimensions).modalButtonGroupContainer}>\n                        {\n                           modalButtonDetails.map((detail:ButtonDetail) => {\n                              return (\n                                 <View style={styles(dimensions).modalButtonContainer}>\n                                    <CustomButton \n                                       buttonText={detail.buttonText}\n                                       buttonColor={detail.buttonColor}\n                                       onPress={detail.onPress}\n                                       buttonTextColor='white'\n                                    />\n                                 </View>\n                              )\n                           })\n                        }\n                        </View>\n                     </View>\n                  </Modal>\n               </Portal>\n            <View style={styles(dimensions).imageContainer}>\n               <Avatar \n                  rounded\n                  overlayContainerStyle={styles(dimensions).avatar}\n                  size = {dimensions.height / 3}\n                  icon={{\n                     type:'ionicon',\n                     name: 'leaf',\n                     color: '#63b175',\n                  }}\n               />\n            </View>\n            <View style={styles(dimensions).detailsContainer}>\n               {\n                  textInputDetails.map((detail:TextInputDetail) => {\n                     return (\n                        <View style={styles(dimensions).textInputContainer}>\n                           <CustomTextInput \n                              placeholder={detail.placeholder} \n                              width={dimensions.width / 2}\n                              value={detail.value}\n                              onChangeText={detail.onChangeText}\n                              obscureText={detail.obscureText ? detail.obscureText:false}\n                           />\n                        </View>\n                     )\n                  })\n               }\n               <View>\n                  {\n                     buttonDetails.map((detail:ButtonDetail) => {\n                        return (\n                           <View style={styles(dimensions).buttonContainer}>\n                              <CustomButton \n                                 buttonText={detail.buttonText}\n                                 buttonTextColor='white'\n                                 buttonColor={detail.buttonColor}\n                                 onPress={detail.onPress}\n                              />\n                           </View>\n                        );\n                     })\n                  }\n               </View>\n            </View>\n         </View>\n      </View> \n   );\n}","import React, { useEffect, useState } from 'react';\nimport { View, Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport CustomButton from '../components/CustomButton';\n\nimport Status from '../constants/status';\nimport GLOBALS from '../constants/globals';\n\nimport database from '../configs/firebase.config';\nimport firebase from 'firebase';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   maxLength?: number,\n   multiline?: boolean,\n   height?: number\n}\n\nfunction RequestScreen() {\n\n   useEffect(() => {\n      Dimensions.addEventListener('change', ({ window, screen }: { window: ScaledSize; screen: ScaledSize }) => {\n         setDimensions(window);\n      });\n   });\n\n   let [ dimensions, setDimensions ] = useState<ScaledSize>(Dimensions.get('window'));\n   \n   let [ name, setName ] = useState<string>('');\n   let [ description, setDescription ] = useState<string>('');\n   \n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Description',\n         onChangeText: (text:string) => setDescription(text),\n         value: description,\n         maxLength: 200,\n         height: dimensions.height * 0.6,\n         multiline: true\n      },\n   ]\n\n   const styles = (dimensions:ScaledSize) => StyleSheet.create({\n      allTextInputsContainer: {\n         paddingLeft: (dimensions.width / 2 - ((dimensions.width / 2) / 2)), // dimensions.width / 2 is the width of the textinput\n      },\n      textInputContainer: {\n         paddingTop: 20,\n      },\n      textInput: {\n         fontSize: 20,\n      },\n      submitButtonContainer: {\n         paddingTop: 20,\n         paddingLeft: (dimensions.width / 2) - (100 / 2),// 100 is the width of the button\n         paddingRight: (dimensions.width / 2) - (100 / 2)// 100 is the width of the button\n      }\n   })\n\n   const validateAndSubmitDetails = async (name:string, description:string) => {\n      console.log(`Name and Description: ${name} ${description}`)\n      if(name == null || name.trim().length == 0) return Status.emptyField1;\n      if(description == null || description.trim().length == 0) return Status.emptyField2;\n\n      if(description.trim().length < 10) return Status.shortDetails;\n\n      return await database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).add({\n         name: name,\n         description: description,\n         timeStamp: firebase.firestore.Timestamp.now()\n      })\n      .then(res => Status.successful)\n      .catch(err => Status.unknownError);\n   }\n\n   return (\n      <View>\n         <CustomAppBar title='Request Screen' color='#96D25A'/>\n         <View style={styles(dimensions).allTextInputsContainer}>\n         {\n            textInputDetails.map(\n               (detail:TextInputDetail) => {\n                  return (\n                     <View style={styles(dimensions).textInputContainer}>\n                        <CustomTextInput \n                           placeholder={detail.placeholder}\n                           onChangeText={detail.onChangeText}\n                           value={detail.value}\n                           obscureText={false}\n                           width={dimensions.width / 2}\n                           height={detail.height || undefined}\n                           multiline={detail.multiline || false}\n                           maxLength={detail.maxLength || undefined}\n                           outlinedBorder={true}\n                        />\n                     </View>\n                  )\n               }\n            )\n         }\n         </View>\n         <View style={styles(dimensions).submitButtonContainer}>\n            <CustomButton \n               buttonColor='red'\n               buttonText='Submit'\n               buttonTextColor='white'\n               onPress={async () => {\n                  let dataSubmittedStatus:Status = await validateAndSubmitDetails(name, description);\n                  switch(dataSubmittedStatus) {\n                     case Status.emptyField1:\n                        alert(`Please fill the name field!`);\n                     break;\n                     case Status.emptyField2:\n                        alert(`Please fill the description field!`)\n                     break;\n                     case Status.shortDetails:\n                        alert(`Description too short!`);\n                     break;\n                     case Status.successful:\n                        alert(`Data submitted successfully!`)\n                     break;\n                     default: alert(`Some error occurred!`)\n                  }\n               }}\n            />\n         </View>\n      </View>\n   )\n}\n\nexport default RequestScreen;","import React, { useState, useEffect } from 'react';\nimport { View, Text, Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport { FlatList, TouchableOpacity } from 'react-native-gesture-handler';\nimport database from '../configs/firebase.config';\nimport GLOBALS from '../constants/globals';\nimport { List, Divider } from 'react-native-paper';\nimport CustomButton from '../components/CustomButton';\n\ninterface ItemInterface {\n   name: string,\n   description: string,\n   timeStamp: Date\n}\n\nfunction ExchangeScreen() {\n\n   const [dimensions, setDimensions] = useState<ScaledSize>(Dimensions.get('window'));\n   const [itemsList, setItemsList] = useState<any[]>([]);\n   const [lastItemFetchedTimestamp, setLastItemFetchedTimestamp] = useState<Date | null>(null);\n\n   useEffect(() => {\n      Dimensions.addEventListener(\"change\", ({ window, screen }) => {\n         setDimensions(window);\n      });\n      fetchItems(null)\n   }, []);\n\n   const styles = (dimensions: ScaledSize) => StyleSheet.create({\n      exchangeButtonContainer: {\n         height: '50%',\n         width: dimensions.width * 0.2\n      },\n      divider: {\n         backgroundColor: 'rgba(0,0,0,0.3)'\n      }\n   })\n\n   const fetchItems = (lastItemFetchedTimestamp?: Date | null) => {\n      try {\n         let dbRef;\n         lastItemFetchedTimestamp != null ?\n         dbRef = database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).orderBy('timeStamp').startAfter(lastItemFetchedTimestamp).limit(1)\n         :\n         dbRef = database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).limit(1)\n\n         database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange)\n            .onSnapshot(snapshot => {\n               let dataList = [];\n               console.log(`Snapshot given: ${JSON.stringify(snapshot)}`);\n               dataList = snapshot.docs.map(doc => doc.data());                              \n               setItemsList(oldList => {\n                  oldList.push(...dataList);\n                  return oldList;\n               });\n               setLastItemFetchedTimestamp((oldTimestamp) => dataList[dataList.length - 1].timeStamp);\n            })\n      } catch (e) {\n         alert(`Some error Occurred in fetching the data!`);\n         console.log(e);\n      }\n   }\n\n   const renderItem = ({ item, index }) => {\n      return (\n         <View>\n            <View>\n               <List.Item\n                  theme={{\n                     colors: {\n                        text: 'black'\n                     }\n                  }}\n                  left={(prop) => <List.Icon icon='table-furniture' color='black'/>}\n                  right={(prop) => (\n                     <View style={styles(dimensions).exchangeButtonContainer}>\n                        <CustomButton\n                           buttonText='Exchange'\n                           buttonTextColor='white'\n                           buttonColor='red'\n                           onPress={() => exchangeItem(item)}\n                        />\n                     </View>\n                  )}\n                  title={item.name}\n                  description={item.description}\n               />\n               <Divider style={styles(dimensions).divider} />\n            </View>\n         </View>\n      );\n   }\n\n   const exchangeItem = (item: any) => {\n      alert(`Exchanging item with name ${item.name}`)\n   }\n\n   return (\n      <View>\n         <CustomAppBar title='Exchange Screen' color='#ffca28' />\n         <View>\n            <FlatList\n               data={itemsList}\n               renderItem={renderItem}\n               keyExtractor={(item, index) => index.toString()}\n               onEndReachedThreshold={10}\n               onEndReached={() => fetchItems(lastItemFetchedTimestamp)}\n            />\n         </View>\n      </View>\n   )\n}\n\nexport default ExchangeScreen;","import React from 'react';\nimport { View, Text } from 'react-native';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport RequestScreen from './RequestScreen';\nimport ExchangeScreen from './ExchangeScreen';\nimport MaterialCommunityIcons from 'react-native-vector-icons/FontAwesome';\n\nfunction ExchangeViewTabNavigator() {\n\n   const BottomTab = createMaterialBottomTabNavigator();\n\n   return (\n      <BottomTab.Navigator\n         barStyle={{ backgroundColor: 'purple' }}\n      >\n         <BottomTab.Screen\n            name=\"exchangeScreen\"\n            component={ExchangeScreen}\n            options={{\n               tabBarLabel: 'Exchange Screen',\n               title: 'Exchange Items',\n               tabBarIcon: ({color}) => <MaterialCommunityIcons \n                  name='handshake-o'\n                  size={20}\n                  color={color}\n               />\n            }}\n         />\n         <BottomTab.Screen\n            name=\"requestScreen\"\n            component={RequestScreen}\n            options={{\n               tabBarLabel: 'Request Screen',\n               title: 'Request Items',\n               tabBarIcon: ({color}) => <MaterialCommunityIcons \n                  name='envelope-open'\n                  size={20}\n                  color={color}\n               />\n            }}\n         />\n      </BottomTab.Navigator>\n   )\n}\n\nexport default ExchangeViewTabNavigator;","import React from 'react';\nimport { StyleSheet, Text, View, Platform } from 'react-native';\nimport database from './configs/firebase.config';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n//screens and assets\nimport LoginScreen from './screens/LoginScreen';\nimport { Provider } from 'react-native-paper';\nimport ExchangeViewTabNavigator from './screens/ ExchangeViewTabNavigator';\n\nexport default function App() {\n\n\tdatabase.enablePersistence();\n\n\tconst Stack = createStackNavigator();\n\n\tconst defaultOptions = {\n\t\theaderShown: false\n\t}\n\n\treturn (\n\t\t\t<Provider>\n\t\t\t\t<NavigationContainer>\n\t\t\t\t\t<Stack.Navigator initialRouteName='loginScreen'>\n\t\t\t\t\t\t<Stack.Screen\n\t\t\t\t\t\t\tname='loginScreen'\n\t\t\t\t\t\t\tcomponent={LoginScreen}\n\t\t\t\t\t\t\toptions={defaultOptions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Stack.Screen\n\t\t\t\t\t\t\tname='exchangeViewTabNavigator'\n\t\t\t\t\t\t\tcomponent={ExchangeViewTabNavigator}\n\t\t\t\t\t\t\toptions={defaultOptions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Stack.Navigator>\n\t\t\t\t</NavigationContainer>\n\t\t\t</Provider>\n\t)\n}\n\nexport const injectWebCss = () => {\n\n\t// Only on web\n\tif (Platform.OS != 'web') return\n\n\t// Inject style\n\tconst style = document.createElement('style')\n\tstyle.textContent = `textarea, select, input, button { outline: none!important; }`\n\treturn document.head.append(style)\n\n}\n\ninjectWebCss()"],"sourceRoot":""}