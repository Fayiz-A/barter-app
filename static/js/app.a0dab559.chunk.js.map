{"version":3,"sources":["configs/firebase.config.ts","components/CustomAppBar.tsx","components/CustomTextInput.tsx","components/CustomButton.tsx","screens/LoginScreen.tsx","constants/globals.ts","App.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","CustomAppBar","props","Appbar","Header","style","backgroundColor","Content","title","alignItems","StyleSheet","create","centerComponent","fontSize","CustomTextInput","placeholder","styles","textInput","onChangeText","value","secureTextEntry","obscureText","width","padding","borderBottomWidth","borderColor","CustomButton","TouchableOpacity","button","onPress","Text","buttonText","Status","buttonColor","justifyContent","borderRadius","paddingHorizontal","paddingVertical","shadowOpacity","shadowRadius","shadowOffset","height","elevation","color","buttonTextColor","fontWeight","fontFamily","collections","names","users","LoginScreen","useEffect","Dimensions","addEventListener","window","screen","setDimensions","useState","get","dimensions","email","setEmail","password","setPassword","modalVisible","setModalVisible","emailIDInModal","setEmailIDInModal","address","setAddress","contactNo","setContactNo","name","setName","textInputDetails","buttonDetails","a","async","authenticateUserWithEmailAndPassword","authStatus","emptyEmail","emptyPassword","emailBadlyFormatted","badCredentials","successful","userNotFound","userDisabled","alert","signUpUser","emailAlreadyInUse","weakPassword","operationNotAllowed","signUpModalDetailsTextInput","text","modalButtonDetails","setUserDetailsInFirestore","userDetailsRegisteredStatus","background","modal","marginLeft","marginTop","modalContent","modalHeadingContainer","modalHeading","modalButtonGroupContainer","paddingTop","modalButtonContainer","paddingBottom","imageContainer","avatar","borderWidth","detailsContainer","textInputContainer","buttonContainer","validateCredentials","trim","length","EmailValidator","validate","credentialsValidStatus","auth","signInWithEmailAndPassword","console","error","errCode","code","unknownError","createUserWithEmailAndPassword","emailID","database","collection","GLOBALS","add","View","Portal","Modal","dismissable","visible","contentContainerStyle","map","detail","rounded","overlayContainerStyle","size","icon","type","App","enablePersistence","Provider","Platform","OS","document","createElement","textContent","head","append","injectWebCss"],"mappings":"4JAWAA,IAASC,cATY,CAClBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAKKP,UAASQ,Y,yECLT,SAASC,EAAaC,GAClC,OACG,kBAACC,EAAA,EAAOC,OAAR,CACGC,MAAO,CAACC,gBAAiB,YAEzB,kBAACH,EAAA,EAAOI,QAAR,CAAgBC,MAAON,EAAMM,MAAOH,MAAO,CAACI,WAAY,aAKlDC,IAAWC,OAAO,CAC9BC,gBAAiB,CACdC,SAAU,MAFhB,I,QCNe,SAASC,EAAgBZ,GACrC,OACG,kBAAC,IAAD,CACGa,YAAab,EAAMa,YACnBV,MAAOW,EAAOd,GAAOe,UACrBC,aAAchB,EAAMgB,aACpBC,MAAOjB,EAAMiB,MACbC,gBAAiBlB,EAAMmB,cAKhC,IAAML,EAAS,SAACd,GAAD,OAAiBQ,IAAWC,OAAO,CAC/CM,UAAW,CACRK,MAAOpB,EAAMoB,MACbT,SAAU,GACVU,QAAS,EACTC,kBAAmB,EACnBC,YAAa,Y,QCnBJ,SAASC,EAAcxB,GACnC,OACG,kBAACyB,EAAA,EAAD,CACGtB,MAAOW,EAAOd,GAAO0B,OACrBC,QAAS3B,EAAM2B,SAEf,kBAACC,EAAA,EAAD,CAAMzB,MAAOW,EAAOd,GAAO6B,YAAa7B,EAAM6B,aAKvD,ICKKC,EDLChB,EAAS,SAACd,GAAD,OAAiBQ,IAAWC,OAAO,CAC/CiB,OAAQ,CACLtB,gBAAiBJ,EAAM+B,YACvBC,eAAgB,SAChBzB,WAAY,SACZ0B,aAAc,GACdC,kBAAmB,EACnBC,gBAAiB,EACjBC,cAAe,GACfC,aAAc,EACdC,aAAc,CACXlB,MAAO,EACPmB,OAAQ,GAEXC,UAAW,IAEdX,WAAY,CACTlB,SAAU,GACV8B,MAAOzC,EAAM0C,gBACbC,WAAY,OACZC,WAAY,c,oCE1CH,EACF,CACP9C,UAAW,CACR+C,YAAa,CACVC,MAAO,CACJC,MAAO,YDoCP,SAASC,IAErBC,qBAAU,WACPC,IAAWC,iBAAiB,UAAU,YAAqE,IAAlEC,EAAiE,EAAjEA,OAAiE,EAAzDC,OAC9CC,EAAcF,SAJe,MAQCG,mBAAqBL,IAAWM,IAAI,WARrC,WAQ7BC,EAR6B,KAQjBH,EARiB,OAUTC,mBAAiB,IAVR,WAU7BG,EAV6B,KAUtBC,EAVsB,OAWHJ,mBAAiB,IAXd,WAW7BK,EAX6B,KAWnBC,EAXmB,OAaKN,oBAAkB,GAbvB,WAa7BO,EAb6B,KAafC,EAbe,OAcSR,mBAAiB,IAd1B,WAc7BS,EAd6B,KAcbC,EAda,OAeLV,mBAAiB,IAfZ,WAe7BW,EAf6B,KAepBC,EAfoB,OAgBDZ,mBAAiB,IAhBhB,WAgB7Ba,EAhB6B,KAgBlBC,EAhBkB,OAiBXd,mBAAiB,IAjBN,WAiB7Be,EAjB6B,KAiBvBC,EAjBuB,KAmB/BC,EAAqC,CACtC,CACG3D,YAAY,QACZG,aAAc,SAAC0C,GAAD,OAAkBC,EAASD,IACzCzC,MAAOyC,GAEV,CACG7C,YAAY,WACZG,aAAc,SAAC4C,GAAD,OAAqBC,EAAYD,IAC/C3C,MAAO2C,EACPzC,aAAa,IAIfsD,EAA+B,CAChC,CACG1C,YAAa,UACbF,WAAY,UACZF,QAAS,0BAAA+C,EAAAC,OAAA,kEAAAD,EAAA,MACwBE,GAAqClB,EAAOE,IADpE,OACFiB,EADE,YAGCA,EAHD,cAIE/C,EAAOgD,WAJT,SAOEhD,EAAOiD,cAPT,SAUEjD,EAAOkD,oBAVT,UAaElD,EAAOmD,eAbT,UAgBEnD,EAAOoD,WAhBT,UAmBEpD,EAAOqD,aAnBT,UAsBErD,EAAOsD,aAtBT,0BAKAC,MAAM,eALN,mCAQAA,MAAM,kBARN,oCAWAA,MAAM,yBAXN,oCAcAA,MAAM,qBAdN,oCAiBAA,MAAM,2BAjBN,oCAoBAA,MAAM,kBApBN,oCAuBAA,MAAM,iBAvBN,6BAyBMA,MAAM,+BAzBZ,+DA6BZ,CACGtD,YAAa,UACbF,WAAY,UACZF,QAAS,0BAAA+C,EAAAC,OAAA,kEAAAD,EAAA,MACwBY,GAAW5B,EAAOE,IAD1C,OACFiB,EADE,YAGCA,EAHD,cAIE/C,EAAOgD,WAJT,SAOEhD,EAAOiD,cAPT,SAUEjD,EAAOkD,oBAVT,UAaElD,EAAOoD,WAbT,UAiBEpD,EAAOyD,kBAjBT,UAoBEzD,EAAO0D,aApBT,UAuBE1D,EAAO2D,oBAvBT,0BAKAJ,MAAM,eALN,mCAQAA,MAAM,kBARN,oCAWAA,MAAM,yBAXN,oCAeAtB,GAAgB,GAfhB,oCAkBAsB,MAAM,wBAlBN,oCAqBAA,MAAM,iBArBN,oCAwBAA,MAAM,yBAxBN,6BA0BMA,MAAM,+BA1BZ,gEAgCXK,EAAgD,CACjD,CACG7E,YAAa,OACbG,aAAc,SAAC2E,GAAD,OAAiBpB,EAAQoB,IACvC1E,MAAOqD,GAEV,CACGzD,YAAa,WACbG,aAAc,SAAC2E,GAAD,OAAiB1B,EAAkB0B,IACjD1E,MAAO+C,GAEV,CACGnD,YAAa,UACbG,aAAc,SAAC2E,GAAD,OAAiBxB,EAAWwB,IAC1C1E,MAAOiD,GAEV,CACGrD,YAAa,cACbG,aAAc,SAAC2E,GAAD,OAAiBtB,EAAasB,IAC5C1E,MAAOmD,IAITwB,GAAoC,CACrC,CACG/D,WAAY,SACZE,YAAa,SACbJ,QAAS,0BAAA+C,EAAAC,OAAA,uDACNZ,GAAgB,GADV,WAAAW,EAAA,MAEyCmB,GAA0BvB,EAAMN,EAAgBE,EAASE,IAFlG,OAEF0B,EAFE,YAIEA,EAJF,cAKEhE,EAAOoD,WALT,wBAMAG,MAAM,sCANN,4BASAA,MAAM,uBATN,+DAaZ,CACGxD,WAAY,SACZE,YAAa,MACbJ,QAAS,kBAAMoC,GAAgB,MAI/BjD,GAAS,SAAC2C,GAAD,OAA4BjD,IAAWC,OAAO,CAC1DsF,WAAY,CACT3F,gBAAgB,UAChBmC,OAAQ,SAEXyD,MAAO,CACJC,WAAYxC,EAAWrC,MAAQ,EAAMqC,EAAWrC,MAAQ,EAAK,EAC7D8E,UAAWzC,EAAWlB,OAAS,EAAMkB,EAAWlB,OAAS,EAAK,EAC9DnB,MAAOqC,EAAWrC,MAAQ,EAC1BmB,OAAQkB,EAAWlB,OAAS,IAC5BH,cAAe,GACfC,aAAc,EACdC,aAAc,CACXlB,MAAO,EACPmB,OAAQ,GAEXC,UAAW,GACXpC,gBAAiB,UACjB6B,aAAc,IAEjBkE,aAAc,CACXnE,eAAgB,aAChBzB,WAAY,SACZgC,OAAQ,OACRnB,MAAO,OACPa,aAAc,IAEjBmE,sBAAuB,CACpBjE,gBAAiB,EACjB5B,WAAY,SACZa,MAAO,QAEViF,aAAc,CACXzD,WAAY,UACZjC,SAAU,GACVgC,WAAY,QAEf2D,0BAA2B,CACxBC,WAAY,GAEfC,qBAAsB,CACnBC,cAAehD,EAAWlB,OAAS,IAEtCmE,eAAgB,CACbvE,gBAAiB,GACjBH,eAAgB,SAChBzB,WAAY,UAEfoG,OAAQ,CACLvG,gBAAiB,QACjBwG,YAAa,GAEhBC,iBAAkB,CACfzF,MAAO,OACPb,WAAY,UAEfuG,mBAAoB,CACjBP,WAAY,IAEfQ,gBAAiB,CACdR,WAAY,OAIZS,GAAsB,SAACtD,EAAcE,GACxC,OAAY,MAATF,GAAwC,GAAvBA,EAAMuD,OAAOC,OAAoBpF,EAAOgD,WAC7C,MAAZlB,GAA8C,GAA1BA,EAASqD,OAAOC,OAAoBpF,EAAOiD,cAC9DoC,IAAeC,SAAS1D,GACrB5B,EAAOoD,WAD6BpD,EAAOkD,qBAI/CJ,GAAuC,SAAOlB,EAAcE,GAArB,iBAAAc,EAAAC,OAAA,oDACtC0C,EAAgCL,GAAoBtD,EAAOE,KAClC9B,EAAOoD,WAFM,yCAEamC,GAFb,kCAAA3C,EAAA,MAKjCpF,IAASgI,OAAOC,2BAA2B7D,EAAOE,IALjB,gCAMhC9B,EAAOoD,YANyB,gCAQvCsC,QAAQC,MAAR,MACIC,EAAU,KAAIC,KATqB,KAWhCD,EAXgC,OAY/B,wBAZ+B,QAe/B,wBAf+B,QAkB/B,uBAlB+B,QAqB/B,uBArB+B,kDAa1B5F,EAAOmD,gBAbmB,iCAgB1BnD,EAAOqD,cAhBmB,iCAmB1BrD,EAAOsD,cAnBmB,iCAsB1BtD,EAAOkD,qBAtBmB,iCAwBpBlD,EAAO8F,cAxBa,yEA6BvCtC,GAAa,SAAO5B,EAAcE,GAArB,iBAAAc,EAAAC,OAAA,oDAEZ0C,EAAgCL,GAAoBtD,EAAOE,KAClC9B,EAAOoD,WAHpB,yCAGuCmC,GAHvC,kCAAA3C,EAAA,MAMPpF,IAASgI,OAAOO,+BAA+BnE,EAAOE,IAN/C,gCAON9B,EAAOoD,YAPD,gCASbsC,QAAQC,MAAR,MACIC,EAAU,KAAIC,KAVL,KAYND,EAZM,OAaL,8BAbK,QAgBL,uBAhBK,QAmBL,+BAnBK,QAsBL,uBAtBK,kDAcA5F,EAAOyD,mBAdP,iCAiBAzD,EAAOkD,qBAjBP,iCAoBAlD,EAAO2D,qBApBP,iCAuBA3D,EAAO0D,cAvBP,iCAyBM1D,EAAO8F,cAzBb,yEA8Bb/B,GAA4B,SAAOvB,EAAawD,EAAgB5D,EAAgBE,GAApD,SAAAM,EAAAC,OAAA,2EAAAD,EAAA,MAEVqD,EAASC,WAAWC,EAAiBnI,UAAU+C,YAAYC,MAAMC,OAAOmF,IAAI,CAC3F5D,KAAMA,EACNwD,QAASA,EACT5D,QAASA,EACTE,UAAWA,KANc,uCAQrBtC,EAAOoD,YARc,uCAU5BsC,QAAQC,MAAR,MAV4B,kBAWrB3F,EAAO8F,cAXc,iEAelC,OACG,kBAACO,EAAA,EAAD,CAAMhI,MAAOW,GAAO2C,GAAYsC,YAC7B,kBAACoC,EAAA,EAAD,KACG,kBAACpI,EAAD,CAAcO,MAAM,UACjB,kBAAC8H,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CACGC,aAAa,EACbC,QAASzE,EACT0E,sBAAuB1H,GAAO2C,GAAY0C,aAC1ChG,MAAOW,GAAO2C,GAAYuC,OAE1B,kBAACmC,EAAA,EAAD,CAAMhI,MAAOW,GAAO2C,GAAY2C,uBAC7B,kBAACxE,EAAA,EAAD,CAAMzB,MAAOW,GAAO2C,GAAY4C,cAAhC,iBAIH,kBAAC8B,EAAA,EAAD,KAEMzC,EAA4B+C,KAAI,SAACC,GAC9B,OACG,kBAACP,EAAA,EAAD,KACG,kBAACvH,EAAD,CACGC,YAAa6H,EAAO7H,YACpBG,aAAc0H,EAAO1H,aACrBC,MAAOyH,EAAOzH,MACdE,aAAa,EACbC,MAAQqC,EAAWrC,MAAQ,EAAK,QAM/C,kBAAC+G,EAAA,EAAD,CAAMhI,MAAOW,GAAO2C,GAAY6C,2BAE7BV,GAAmB6C,KAAI,SAACC,GACrB,OACG,kBAACP,EAAA,EAAD,CAAMhI,MAAOW,GAAO2C,GAAY+C,sBAC7B,kBAAChF,EAAD,CACGK,WAAY6G,EAAO7G,WACnBE,YAAa2G,EAAO3G,YACpBJ,QAAS+G,EAAO/G,QAChBe,gBAAgB,kBAU3C,kBAACyF,EAAA,EAAD,CAAMhI,MAAOW,GAAO2C,GAAYiD,gBAC7B,kBAAC,IAAD,CACGiC,SAAO,EACPC,sBAAuB9H,GAAO2C,GAAYkD,OAC1CkC,KAAQpF,EAAWlB,OAAS,EAC5BuG,KAAM,CACHC,KAAK,UACLzE,KAAM,OACN7B,MAAO,cAIhB,kBAAC0F,EAAA,EAAD,CAAMhI,MAAOW,GAAO2C,GAAYoD,kBAE1BrC,EAAiBiE,KAAI,SAACC,GACnB,OACG,kBAACP,EAAA,EAAD,CAAMhI,MAAOW,GAAO2C,GAAYqD,oBAC7B,kBAAClG,EAAD,CACGC,YAAa6H,EAAO7H,YACpBO,MAAOqC,EAAWrC,MAAQ,EAC1BH,MAAOyH,EAAOzH,MACdD,aAAc0H,EAAO1H,aACrBG,cAAauH,EAAOvH,aAAcuH,EAAOvH,kBAMxD,kBAACgH,EAAA,EAAD,KAEM1D,EAAcgE,KAAI,SAACC,GAChB,OACG,kBAACP,EAAA,EAAD,CAAMhI,MAAOW,GAAO2C,GAAYsD,iBAC7B,kBAACvF,EAAD,CACGK,WAAY6G,EAAO7G,WACnBa,gBAAgB,QAChBX,YAAa2G,EAAO3G,YACpBJ,QAAS+G,EAAO/G,mB,SA3Y5CG,O,2BAAAA,I,+BAAAA,I,mCAAAA,I,2BAAAA,I,iCAAAA,I,6CAAAA,I,+BAAAA,I,+BAAAA,I,6CAAAA,I,+BAAAA,I,2CAAAA,M,kBElBU,SAASkH,IAGtB,OAFDjB,EAASkB,oBAED,kBAACC,EAAA,EAAD,KACH,kBAAClG,EAAD,QAIsB,WAG3B,GAAoB,OAAfmG,IAASC,GAAd,CAGA,IAAMjJ,EAAQkJ,SAASC,cAAc,SACrCnJ,EAAMoJ,YAAN,+DACOF,SAASG,KAAKC,OAAOtJ,IAI7BuJ,I","file":"static/js/app.a0dab559.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n   apiKey: \"AIzaSyCtJWEiHkscsBR9mhAV8PzPn7Ijy46bOdI\",\n   authDomain: \"barter-app-1d780.firebaseapp.com\",\n   projectId: \"barter-app-1d780\",\n   storageBucket: \"barter-app-1d780.appspot.com\",\n   messagingSenderId: \"544892223600\",\n   appId: \"1:544892223600:web:7f83694a6daecd2992f4b5\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase.firestore();","import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Appbar } from 'react-native-paper';\n\ninterface Props {\n   title:string\n}\n\nexport default function CustomAppBar(props: Props) {\n   return(\n      <Appbar.Header\n         style={{backgroundColor: '#6d4c41'}}\n      >\n         <Appbar.Content title={props.title} style={{alignItems: \"center\"}}/>\n      </Appbar.Header>\n   );\n}\n\nconst styles = StyleSheet.create({\n   centerComponent: {\n      fontSize: 20\n   }\n})","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Input } from 'react-native-elements';\n\ninterface Props {\n   placeholder:string,\n   width: number,\n   onChangeText: (text:string) => void,\n   value: string,\n   obscureText: boolean\n}\n\nexport default function CustomTextInput(props:Props) {\n   return (\n      <Input \n         placeholder={props.placeholder}\n         style={styles(props).textInput}\n         onChangeText={props.onChangeText}\n         value={props.value}\n         secureTextEntry={props.obscureText}\n      />\n   );\n}\n\nconst styles = (props:Props) => StyleSheet.create({\n   textInput: {\n      width: props.width,\n      fontSize: 23,\n      padding: 3,\n      borderBottomWidth: 2,\n      borderColor: 'black'\n   }\n})","import React, { } from 'react';\nimport { TouchableOpacity, Text, StyleSheet, ColorValue } from 'react-native';\nimport { Colors } from 'react-native-elements';\n\ninterface Props {\n   buttonText:string,\n   buttonColor: ColorValue,\n   buttonTextColor: ColorValue,\n   onPress: () => void\n}\n\nexport default function CustomButton (props:Props) {\n   return (\n      <TouchableOpacity\n         style={styles(props).button}\n         onPress={props.onPress}\n      >\n         <Text style={styles(props).buttonText}>{props.buttonText}</Text>\n      </TouchableOpacity>\n   );\n}\n\nconst styles = (props:Props) => StyleSheet.create({\n   button: {\n      backgroundColor: props.buttonColor,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 23,\n      paddingHorizontal: 7,\n      paddingVertical: 5,\n      shadowOpacity: 0.5,\n      shadowRadius: 2.0,\n      shadowOffset: {\n         width: 0.0,\n         height: 4.0\n      },\n      elevation: 20\n   },\n   buttonText: {\n      fontSize: 23,\n      color: props.buttonTextColor,\n      fontWeight: 'bold',\n      fontFamily: 'cursive'\n   }\n})","import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, ScaledSize, Dimensions, ColorValue } from \"react-native\";\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport { Avatar } from 'react-native-elements';\nimport CustomButton from '../components/CustomButton';\nimport EmailValidator from 'email-validator';\nimport { Modal, Portal } from 'react-native-paper';\n\nimport firebase from 'firebase';\nimport database from '../configs/firebase.config';\n\nimport GLOBALS from '../constants/globals';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   obscureText?: boolean\n}\n\ninterface ButtonDetail {\n   buttonText:string,\n   onPress: () => void,\n   buttonColor: ColorValue\n}\n\nenum Status {\n   successful,\n   unknownError,\n   badCredentials,\n   emptyEmail,\n   emptyPassword,\n   emailBadlyFormatted,\n   userNotFound,\n   userDisabled,\n   operationNotAllowed,\n   weakPassword,\n   emailAlreadyInUse\n} \n\nexport default function LoginScreen() {\n\n   useEffect(() => {\n      Dimensions.addEventListener('change', ({ window, screen }: { window: ScaledSize; screen: ScaledSize }) => {\n         setDimensions(window);\n      });\n   });\n\n   let [ dimensions, setDimensions ] = useState<ScaledSize>(Dimensions.get('window'));\n   \n   let [ email, setEmail ] = useState<string>('');\n   let [ password, setPassword ] = useState<string>('');\n\n   let [ modalVisible, setModalVisible ] = useState<boolean>(false);\n   let [ emailIDInModal, setEmailIDInModal ] = useState<string>('');\n   let [ address, setAddress ] = useState<string>('');\n   let [ contactNo, setContactNo ] = useState<string>('');\n   let [ name, setName ] = useState<string>('');\n\n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder:'Email',\n         onChangeText: (email:string) => setEmail(email),\n         value: email,\n      },\n      {\n         placeholder:'Password',\n         onChangeText: (password:string) => setPassword(password),\n         value: password,\n         obscureText: true\n      }\n   ]\n\n   let buttonDetails:ButtonDetail[] = [\n      {\n         buttonColor: '#4CAF50',\n         buttonText: 'Sign In',\n         onPress: async () => {\n            let authStatus:Status = await authenticateUserWithEmailAndPassword(email, password);\n\n            switch(authStatus) {\n               case Status.emptyEmail:\n                  alert(`Empty email`)\n               break;\n               case Status.emptyPassword:\n                  alert(`Empty password`)\n               break;\n               case Status.emailBadlyFormatted:\n                  alert(`Email badly formatted`)\n               break;\n               case Status.badCredentials:\n                  alert(`Wrong credentials`);\n               break;\n               case Status.successful:\n                  alert(`User sign in successful`)\n               break;\n               case Status.userNotFound:\n                  alert(`User not found`)\n               break;\n               case Status.userDisabled:\n                  alert(`User disabled`)\n               break;\n               default: alert(`Some unknown error occurred`)\n            }\n         }\n      },\n      {\n         buttonColor: '#3F51B5',\n         buttonText: 'Sign Up',\n         onPress: async () => {\n            let authStatus:Status = await signUpUser(email, password);\n\n            switch(authStatus) {\n               case Status.emptyEmail:\n                  alert(`Empty email`)\n               break;\n               case Status.emptyPassword:\n                  alert(`Empty password`)\n               break;\n               case Status.emailBadlyFormatted:\n                  alert(`Email badly formatted`)\n               break;\n               case Status.successful:\n                  // alert(`User added successfully`)\n                  setModalVisible(true);\n               break;\n               case Status.emailAlreadyInUse:\n                  alert(`Email already in use`)\n               break;\n               case Status.weakPassword:\n                  alert(`Weak password`)\n               break;\n               case Status.operationNotAllowed:\n                  alert(`Operation not allowed`)\n               break;\n               default: alert(`Some unknown error occurred`)\n            }\n         }\n      }\n   ]\n\n   let signUpModalDetailsTextInput:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Email ID',\n         onChangeText: (text:string) => setEmailIDInModal(text),\n         value: emailIDInModal,\n      },\n      {\n         placeholder: 'Address',\n         onChangeText: (text:string) => setAddress(text),\n         value: address,\n      },\n      {\n         placeholder: 'Contact No.',\n         onChangeText: (text:string) => setContactNo(text),\n         value: contactNo,\n      }\n   ]\n\n   let modalButtonDetails:ButtonDetail[] = [\n      {\n         buttonText: 'Submit',\n         buttonColor: 'purple',\n         onPress: async () => {\n            setModalVisible(false);\n            let userDetailsRegisteredStatus:Status = await setUserDetailsInFirestore(name, emailIDInModal, address, contactNo);\n            \n            switch (userDetailsRegisteredStatus) {\n               case Status.successful:\n                  alert(`User details entered successfully.`)\n               break;\n               default:\n                  alert(`Some Error Occurred`);\n            }\n         }\n      },\n      {\n         buttonText: 'Cancel',\n         buttonColor: 'red',\n         onPress: () => setModalVisible(false)\n      }\n   ] \n\n   const styles = (dimensions: ScaledSize) => StyleSheet.create({\n      background: {\n         backgroundColor:'#F8BE85',\n         height: '100vh',      \n      }, \n      modal: {\n         marginLeft: dimensions.width / 2 - ((dimensions.width / 2) / 2), // dimensions.width / 2 is the width of the modal\n         marginTop: dimensions.height / 2 - ((dimensions.height / 2) / 2), // dimensions.height / 2 is the width of the modal\n         width: dimensions.width / 2,\n         height: dimensions.height / 1.9,\n         shadowOpacity: 0.5,\n         shadowRadius: 2.0,\n         shadowOffset: {\n            width: 0.0,\n            height: 6.0\n         },\n         elevation: 20.0,\n         backgroundColor: '#FFC107',\n         borderRadius: 20.0,\n      },\n      modalContent: {\n         justifyContent: 'flex-start',\n         alignItems: 'center',\n         height: '100%',\n         width: '100%',\n         borderRadius: 20.0\n      },\n      modalHeadingContainer: {\n         paddingVertical: 1,\n         alignItems: 'center',\n         width: '100%',\n      },\n      modalHeading: {\n         fontFamily: 'cursive',\n         fontSize: 30,\n         fontWeight: 'bold'\n      },\n      modalButtonGroupContainer: {\n         paddingTop: 5,\n      },\n      modalButtonContainer: {\n         paddingBottom: dimensions.height / 60,\n      },\n      imageContainer: {\n         paddingVertical: 20,\n         justifyContent: \"center\",\n         alignItems: 'center',\n      },\n      avatar: {\n         backgroundColor: 'white', \n         borderWidth: 5\n      },\n      detailsContainer: {\n         width: '100%',\n         alignItems: 'center'\n      },\n      textInputContainer: {\n         paddingTop: 20,\n      },\n      buttonContainer: {\n         paddingTop: 15,\n      }\n   })\n\n   const validateCredentials = (email:string, password:string):Status => {\n      if(email == null || email.trim().length == 0) return Status.emptyEmail\n      if(password == null || password.trim().length == 0) return Status.emptyPassword\n      if(!EmailValidator.validate(email)) return Status.emailBadlyFormatted\n      return Status.successful;\n   }\n   \n   const authenticateUserWithEmailAndPassword = async (email:string, password: string) => {\n      let credentialsValidStatus:Status = validateCredentials(email, password);\n      if(credentialsValidStatus != Status.successful) return credentialsValidStatus;\n   \n      try {\n         await firebase.auth().signInWithEmailAndPassword(email, password);\n         return Status.successful;\n      } catch(err) {\n         console.error(err);\n         let errCode = err.code;\n   \n         switch(errCode) {\n            case 'auth/wrong-password':\n               return Status.badCredentials\n            break;\n            case 'auth/user-not-found':\n               return Status.userNotFound\n            break;\n            case 'auth/user-disabled':\n               return Status.userDisabled\n            break;\n            case 'auth/invalid-email':\n               return Status.emailBadlyFormatted\n            break;\n            default: return Status.unknownError\n         } \n      };\n   }\n   \n   const signUpUser = async (email:string, password: string):Promise<Status> => {\n      \n      let credentialsValidStatus:Status = validateCredentials(email, password);\n      if(credentialsValidStatus != Status.successful) return credentialsValidStatus;\n   \n      try {\n         await firebase.auth().createUserWithEmailAndPassword(email, password);\n         return Status.successful;\n      } catch(err) {\n         console.error(err);\n         let errCode = err.code;\n   \n         switch(errCode) {\n            case 'auth/email-already-in-use':\n               return Status.emailAlreadyInUse\n            break;\n            case 'auth/invalid-email':\n               return Status.emailBadlyFormatted\n            break;\n            case 'auth/operation-not-allowed':\n               return Status.operationNotAllowed\n            break;\n            case 'auth/weak-password':\n               return Status.weakPassword\n            break;\n            default: return Status.unknownError\n         } \n      };\n   }\n\n   const setUserDetailsInFirestore = async (name:string, emailID:string, address:string, contactNo:string):Promise<Status> => {\n      try {\n         const res = await database.collection(GLOBALS.firebase.firestore.collections.names.users).add({\n            name: name,\n            emailID: emailID,\n            address: address,\n            contactNo: contactNo\n         });\n         return Status.successful;\n      } catch (err) {\n         console.error(err);\n         return Status.unknownError;\n      }\n   }\n\n   return (\n      <View style={styles(dimensions).background}>\n         <View>\n            <CustomAppBar title='Login'/>\n               <Portal>\n                  <Modal\n                     dismissable={false}\n                     visible={modalVisible}\n                     contentContainerStyle={styles(dimensions).modalContent}\n                     style={styles(dimensions).modal}\n                  >\n                     <View style={styles(dimensions).modalHeadingContainer}>\n                        <Text style={styles(dimensions).modalHeading}>\n                           Information:\n                        </Text>\n                     </View>\n                     <View>\n                        {\n                           signUpModalDetailsTextInput.map((detail:TextInputDetail) => {\n                              return (\n                                 <View>\n                                    <CustomTextInput \n                                       placeholder={detail.placeholder}\n                                       onChangeText={detail.onChangeText}\n                                       value={detail.value}\n                                       obscureText={false}\n                                       width={(dimensions.width / 2) / 2} //dimensions.width / 2 is the width of the modal\n                                    />\n                                 </View>\n                              )\n                           })\n                        }\n                        <View style={styles(dimensions).modalButtonGroupContainer}>\n                        {\n                           modalButtonDetails.map((detail:ButtonDetail) => {\n                              return (\n                                 <View style={styles(dimensions).modalButtonContainer}>\n                                    <CustomButton \n                                       buttonText={detail.buttonText}\n                                       buttonColor={detail.buttonColor}\n                                       onPress={detail.onPress}\n                                       buttonTextColor='white'\n                                    />\n                                 </View>\n                              )\n                           })\n                        }\n                        </View>\n                     </View>\n                  </Modal>\n               </Portal>\n            <View style={styles(dimensions).imageContainer}>\n               <Avatar \n                  rounded\n                  overlayContainerStyle={styles(dimensions).avatar}\n                  size = {dimensions.height / 3}\n                  icon={{\n                     type:'ionicon',\n                     name: 'leaf',\n                     color: '#63b175',\n                  }}\n               />\n            </View>\n            <View style={styles(dimensions).detailsContainer}>\n               {\n                  textInputDetails.map((detail:TextInputDetail) => {\n                     return (\n                        <View style={styles(dimensions).textInputContainer}>\n                           <CustomTextInput \n                              placeholder={detail.placeholder} \n                              width={dimensions.width / 2}\n                              value={detail.value}\n                              onChangeText={detail.onChangeText}\n                              obscureText={detail.obscureText ? detail.obscureText:false}\n                           />\n                        </View>\n                     )\n                  })\n               }\n               <View>\n                  {\n                     buttonDetails.map((detail:ButtonDetail) => {\n                        return (\n                           <View style={styles(dimensions).buttonContainer}>\n                              <CustomButton \n                                 buttonText={detail.buttonText}\n                                 buttonTextColor='white'\n                                 buttonColor={detail.buttonColor}\n                                 onPress={detail.onPress}\n                              />\n                           </View>\n                        );\n                     })\n                  }\n               </View>\n            </View>\n         </View>\n      </View> \n   );\n}","export default {\n   firebase: {\n      firestore: {\n         collections: {\n            names: {\n               users: 'users'\n            }\n         }\n      }\n   }\n}","import React from 'react';\nimport { StyleSheet, Text, View, Platform } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport database from './configs/firebase.config';\n\n//screens and assets\nimport LoginScreen from './screens/LoginScreen';\nimport { Provider } from 'react-native-paper';\n\nexport default function App() {\n\tdatabase.enablePersistence();\n\n  return <Provider>\n\t  \t\t\t<LoginScreen /> \n\t\t  \t</Provider>\n}\n\nexport const injectWebCss = () => {\n\n\t// Only on web\n\tif ( Platform.OS != 'web' ) return\n\n\t// Inject style\n\tconst style = document.createElement('style')\n\tstyle.textContent = `textarea, select, input, button { outline: none!important; }`\n\treturn document.head.append(style)\n\n}\n\ninjectWebCss()"],"sourceRoot":""}