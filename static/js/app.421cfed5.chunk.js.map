{"version":3,"sources":["components/CustomAppBar.tsx","components/CustomTextInput.tsx","components/CustomButton.tsx","configs/firebase.config.ts","constants/status.ts","constants/globals.ts","screens/LoginScreen.tsx","screens/RequestScreen.tsx","screens/ExchangeScreen.tsx","screens/ ExchangeViewTabNavigator.tsx","screens/SettingsScreen.tsx","App.tsx"],"names":["CustomAppBar","props","navigation","useNavigation","Appbar","Header","style","backgroundColor","color","drawerAvailable","Action","icon","size","onPress","dispatch","DrawerActions","toggleDrawer","Content","title","alignItems","StyleSheet","create","centerComponent","fontSize","CustomTextInput","TextInput","placeholder","styles","textInput","onChangeText","value","secureTextEntry","obscureText","multiline","maxLength","undefined","width","height","padding","borderBottomWidth","outlinedBorder","borderColor","borderWidth","borderRadius","CustomButton","TouchableOpacity","button","Text","buttonText","buttonColor","justifyContent","paddingHorizontal","paddingVertical","shadowOpacity","shadowRadius","shadowOffset","elevation","buttonTextColor","fontWeight","fontFamily","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Status","firestore","collections","names","users","itemsToExchange","name","emailID","LoginScreen","dimensions","useWindowDimensions","useState","email","setEmail","password","setPassword","modalVisible","setModalVisible","emailIDInModal","setEmailIDInModal","address","setAddress","contactNo","setContactNo","setName","textInputDetails","buttonDetails","a","async","authenticateUserWithEmailAndPassword","authStatus","emptyField1","emptyField2","emailBadlyFormatted","badCredentials","successful","userNotFound","userDisabled","alert","replace","signUpUser","emailAlreadyInUse","weakPassword","operationNotAllowed","signUpModalDetailsTextInput","text","modalButtonDetails","setUserDetailsInFirestore","userDetailsRegisteredStatus","navigate","background","modal","marginLeft","marginTop","modalContent","modalHeadingContainer","modalHeading","modalButtonGroupContainer","paddingTop","modalButtonContainer","paddingBottom","imageContainer","avatar","detailsContainer","textInputContainer","buttonContainer","validateCredentials","trim","length","EmailValidator","validate","credentialsValidStatus","auth","signInWithEmailAndPassword","console","error","errCode","code","unknownError","createUserWithEmailAndPassword","database","collection","GLOBALS","add","View","Portal","Modal","dismissable","visible","contentContainerStyle","map","detail","rounded","overlayContainerStyle","type","RequestScreen","description","setDescription","allTextInputsContainer","paddingLeft","submitButtonContainer","paddingRight","validateAndSubmitDetails","log","shortDetails","timeStamp","Timestamp","now","then","res","catch","err","dataSubmittedStatus","ExchangeScreen","itemsList","setItemsList","lastItemFetchedTimestamp","setLastItemFetchedTimestamp","useEffect","fetchItems","exchangeButtonContainer","divider","orderBy","startAfter","limit","onSnapshot","snapshot","dataList","docs","doc","data","oldList","push","oldTimestamp","e","exchangeItem","item","renderItem","index","Item","theme","colors","left","prop","Icon","right","Divider","keyExtractor","toString","onEndReachedThreshold","onEndReached","ExchangeViewTabNavigator","BottomTab","createMaterialBottomTabNavigator","Navigator","barStyle","Screen","component","options","tabBarLabel","tabBarIcon","SettingsScreen","setEmailID","userDocId","setUserDocId","windowDetails","currentUserEmail","currentUser","getAndSetUserDetails","currentUserEmailID","where","id","update","updateProfile","Root","Stack","createStackNavigator","defaultOptions","headerShown","stackScreenInfoList","initialRouteName","App","Drawer","createDrawerNavigator","drawer","borderTopRightRadius","borderBottomRightRadius","drawerContent","flex","logOutButton","logOutButtonContent","flexDirection","logOutButtonText","drawerScreenInfoList","Provider","NavigationContainer","drawerStyle","DrawerContent","state","descriptors","progress","signOut","drawerType","Platform","OS","document","createElement","textContent","head","append","injectWebCss"],"mappings":"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","file":"static/js/app.421cfed5.chunk.js","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, ColorValue } from 'react-native';\nimport { Appbar } from 'react-native-paper';\nimport { useNavigation, DrawerActions } from '@react-navigation/native';\nimport { Icon } from 'react-native-paper/lib/typescript/components/Avatar/Avatar';\n\ninterface Props {\n   title:string,\n   color?: ColorValue,\n   drawerAvailable?: boolean\n}\n\nexport default function CustomAppBar(props: Props) {\n\n   const navigation = useNavigation();\n   \n   return(\n      <Appbar.Header\n         style={{backgroundColor: props.color ? props.color:'#6d4c41'}}\n      >\n         {\n            props.drawerAvailable ? <Appbar.Action \n               icon={'menu'}\n               size={30}\n               onPress={() => navigation.dispatch(DrawerActions.toggleDrawer)}\n            />:null\n         }\n         <Appbar.Content \n            title={props.title} \n            style={{alignItems: \"center\"}}\n         />\n      </Appbar.Header>\n   );\n}\n\nconst styles = StyleSheet.create({\n   centerComponent: {\n      fontSize: 20\n   }\n})","import React from 'react';\nimport { StyleSheet, TextInput } from 'react-native';\nimport { Input } from 'react-native-elements';\n\nexport interface Props {\n   placeholder:string,\n   width: number,\n   height?: number,\n   onChangeText: (text:string) => void,\n   value: string,\n   obscureText: boolean,\n   multiline?: boolean,\n   maxLength?: number,\n   outlinedBorder?:boolean\n}\n\nexport default function CustomTextInput(props:Props) {\n   return (\n      <TextInput \n         placeholder={props.placeholder}\n         style={styles(props).textInput}\n         onChangeText={props.onChangeText}\n         value={props.value}\n         secureTextEntry={props.obscureText}\n         multiline={props.multiline || false}\n         maxLength={props.maxLength || undefined}\n      />\n   );\n}\n\nconst styles = (props:Props) => StyleSheet.create({\n   textInput: {\n      width: props.width,\n      height: props.height || undefined,\n      fontSize: 23,\n      padding: 3,\n      borderBottomWidth: props.outlinedBorder ? undefined:2,\n      borderColor: 'black',\n      borderWidth: props.outlinedBorder ? 5:undefined,\n      borderRadius: props.outlinedBorder ? 25:0\n   }\n})","import React, { } from 'react';\nimport { TouchableOpacity, Text, StyleSheet, ColorValue } from 'react-native';\nimport { Colors } from 'react-native-elements';\n\ninterface Props {\n   buttonText:string,\n   buttonColor: ColorValue,\n   buttonTextColor: ColorValue,\n   onPress: () => void\n}\n\nexport default function CustomButton (props:Props) {\n   return (\n      <TouchableOpacity\n         style={styles(props).button}\n         onPress={props.onPress}\n      >\n         <Text style={styles(props).buttonText}>{props.buttonText}</Text>\n      </TouchableOpacity>\n   );\n}\n\nconst styles = (props:Props) => StyleSheet.create({\n   button: {\n      backgroundColor: props.buttonColor,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 23,\n      paddingHorizontal: 7,\n      paddingVertical: 5,\n      shadowOpacity: 0.5,\n      shadowRadius: 2.0,\n      shadowOffset: {\n         width: 0.0,\n         height: 4.0\n      },\n      elevation: 20\n   },\n   buttonText: {\n      fontSize: 23,\n      color: props.buttonTextColor,\n      fontWeight: 'bold',\n      fontFamily: 'cursive'\n   }\n})","import firebase from 'firebase';\n\nvar firebaseConfig = {\n   apiKey: \"AIzaSyCtJWEiHkscsBR9mhAV8PzPn7Ijy46bOdI\",\n   authDomain: \"barter-app-1d780.firebaseapp.com\",\n   projectId: \"barter-app-1d780\",\n   storageBucket: \"barter-app-1d780.appspot.com\",\n   messagingSenderId: \"544892223600\",\n   appId: \"1:544892223600:web:7f83694a6daecd2992f4b5\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase.firestore();","enum Status {\n   successful,\n   unknownError,\n   badCredentials,\n   emptyField1,\n   emptyField2,\n   emailBadlyFormatted,\n   userNotFound,\n   userDisabled,\n   operationNotAllowed,\n   weakPassword,\n   emailAlreadyInUse,\n   shortDetails\n} \n\nexport default Status;","export default {\n   firebase: {\n      firestore: {\n         collections: {\n            names: {\n               users: 'users',\n               itemsToExchange: 'itemsToExchange'\n            },\n            users: {\n               names: {\n                  name: 'name',\n                  emailID: 'emailID'\n               }\n            }\n         }\n      }\n   }\n}","import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, ScaledSize, Dimensions, ColorValue, useWindowDimensions } from \"react-native\";\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport { Avatar } from 'react-native-elements';\nimport CustomButton from '../components/CustomButton';\nimport EmailValidator from 'email-validator';\nimport { Modal, Portal } from 'react-native-paper';\n\nimport firebase from 'firebase';\nimport database from '../configs/firebase.config';\n\nimport GLOBALS from '../constants/globals';\nimport Status from '../constants/status';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   obscureText?: boolean\n}\n\ninterface ButtonDetail {\n   buttonText:string,\n   onPress: () => void,\n   buttonColor: ColorValue\n}\n\ninterface Props {\n   navigation: any,\n}\n\nexport default function LoginScreen(props:Props) {\n\n   let dimensions = useWindowDimensions();\n\n   let [ email, setEmail ] = useState<string>('');\n   let [ password, setPassword ] = useState<string>('');\n\n   let [ modalVisible, setModalVisible ] = useState<boolean>(false);\n   let [ emailIDInModal, setEmailIDInModal ] = useState<string>('');\n   let [ address, setAddress ] = useState<string>('');\n   let [ contactNo, setContactNo ] = useState<string>('');\n   let [ name, setName ] = useState<string>('');\n\n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder:'Email',\n         onChangeText: (email:string) => setEmail(email),\n         value: email,\n      },\n      {\n         placeholder:'Password',\n         onChangeText: (password:string) => setPassword(password),\n         value: password,\n         obscureText: true\n      }\n   ]\n\n   let buttonDetails:ButtonDetail[] = [\n      {\n         buttonColor: '#4CAF50',\n         buttonText: 'Sign In',\n         onPress: async () => {\n            let authStatus:Status = await authenticateUserWithEmailAndPassword(email, password);\n\n            switch(authStatus) {\n               case Status.emptyField1:\n                  alert(`Empty email`)\n               break;\n               case Status.emptyField2:\n                  alert(`Empty password`)\n               break;\n               case Status.emailBadlyFormatted:\n                  alert(`Email badly formatted`)\n               break;\n               case Status.badCredentials:\n                  alert(`Wrong credentials`);\n               break;\n               case Status.successful:\n                  props.navigation.replace('homeScreen')\n               break;\n               case Status.userNotFound:\n                  alert(`User not found`)\n               break;\n               case Status.userDisabled:\n                  alert(`User disabled`)\n               break;\n               default: alert(`Some unknown error occurred`)\n            }\n         }\n      },\n      {\n         buttonColor: '#3F51B5',\n         buttonText: 'Sign Up',\n         onPress: async () => {\n            let authStatus:Status = await signUpUser(email, password);\n\n            switch(authStatus) {\n               case Status.emptyField1:\n                  alert(`Empty email`)\n               break;\n               case Status.emptyField2:\n                  alert(`Empty password`)\n               break;\n               case Status.emailBadlyFormatted:\n                  alert(`Email badly formatted`)\n               break;\n               case Status.successful:\n                  // alert(`User added successfully`)\n                  setModalVisible(true);\n               break;\n               case Status.emailAlreadyInUse:\n                  alert(`Email already in use`)\n               break;\n               case Status.weakPassword:\n                  alert(`Weak password`)\n               break;\n               case Status.operationNotAllowed:\n                  alert(`Operation not allowed`)\n               break;\n               default: alert(`Some unknown error occurred`)\n            }\n         }\n      }\n   ]\n\n   let signUpModalDetailsTextInput:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Email ID',\n         onChangeText: (text:string) => setEmailIDInModal(text),\n         value: emailIDInModal,\n      },\n      {\n         placeholder: 'Address',\n         onChangeText: (text:string) => setAddress(text),\n         value: address,\n      },\n      {\n         placeholder: 'Contact No.',\n         onChangeText: (text:string) => setContactNo(text),\n         value: contactNo,\n      }\n   ]\n\n   let modalButtonDetails:ButtonDetail[] = [\n      {\n         buttonText: 'Submit',\n         buttonColor: 'purple',\n         onPress: async () => {\n            setModalVisible(false);\n            let userDetailsRegisteredStatus:Status = await setUserDetailsInFirestore(name, emailIDInModal, address, contactNo);\n            \n            switch (userDetailsRegisteredStatus) {\n               case Status.successful:\n                  props.navigation.navigate('homeScreen')\n               break;\n               default:\n                  alert(`Some Error Occurred`);\n            }\n         }\n      },\n      {\n         buttonText: 'Cancel',\n         buttonColor: 'red',\n         onPress: () => setModalVisible(false)\n      }\n   ] \n\n   const styles = (dimensions: ScaledSize) => StyleSheet.create({\n      background: {\n         backgroundColor:'#F8BE85',\n         height: '100vh',      \n      }, \n      modal: {\n         marginLeft: dimensions.width / 2 - ((dimensions.width / 2) / 2), // dimensions.width / 2 is the width of the modal\n         marginTop: dimensions.height / 2 - ((dimensions.height / 2) / 2), // dimensions.height / 2 is the width of the modal\n         width: dimensions.width / 2,\n         height: dimensions.height / 1.9,\n         shadowOpacity: 0.5,\n         shadowRadius: 2.0,\n         shadowOffset: {\n            width: 0.0,\n            height: 6.0\n         },\n         elevation: 20.0,\n         backgroundColor: '#FFC107',\n         borderRadius: 20.0,\n      },\n      modalContent: {\n         justifyContent: 'flex-start',\n         alignItems: 'center',\n         height: '100%',\n         width: '100%',\n         borderRadius: 20.0\n      },\n      modalHeadingContainer: {\n         paddingVertical: 1,\n         alignItems: 'center',\n         width: '100%',\n      },\n      modalHeading: {\n         fontFamily: 'cursive',\n         fontSize: 30,\n         fontWeight: 'bold'\n      },\n      modalButtonGroupContainer: {\n         paddingTop: 5,\n      },\n      modalButtonContainer: {\n         paddingBottom: dimensions.height / 60,\n      },\n      imageContainer: {\n         paddingVertical: 20,\n         justifyContent: \"center\",\n         alignItems: 'center',\n      },\n      avatar: {\n         backgroundColor: 'white', \n         borderWidth: 5\n      },\n      detailsContainer: {\n         width: '100%',\n         alignItems: 'center'\n      },\n      textInputContainer: {\n         paddingTop: 20,\n      },\n      buttonContainer: {\n         paddingTop: 15,\n      }\n   })\n\n   const validateCredentials = (email:string, password:string):Status => {\n      if(email == null || email.trim().length == 0) return Status.emptyField1\n      if(password == null || password.trim().length == 0) return Status.emptyField2\n      if(!EmailValidator.validate(email)) return Status.emailBadlyFormatted\n      return Status.successful;\n   }\n   \n   const authenticateUserWithEmailAndPassword = async (email:string, password: string) => {\n      let credentialsValidStatus:Status = validateCredentials(email, password);\n      if(credentialsValidStatus != Status.successful) return credentialsValidStatus;\n   \n      try {\n         await firebase.auth().signInWithEmailAndPassword(email, password);\n         return Status.successful;\n      } catch(err) {\n         console.error(err);\n         let errCode = err.code;\n   \n         switch(errCode) {\n            case 'auth/wrong-password':\n               return Status.badCredentials\n            break;\n            case 'auth/user-not-found':\n               return Status.userNotFound\n            break;\n            case 'auth/user-disabled':\n               return Status.userDisabled\n            break;\n            case 'auth/invalid-email':\n               return Status.emailBadlyFormatted\n            break;\n            default: return Status.unknownError\n         } \n      };\n   }\n   \n   const signUpUser = async (email:string, password: string):Promise<Status> => {\n      \n      let credentialsValidStatus:Status = validateCredentials(email, password);\n      if(credentialsValidStatus != Status.successful) return credentialsValidStatus;\n   \n      try {\n         await firebase.auth().createUserWithEmailAndPassword(email, password);\n         return Status.successful;\n      } catch(err) {\n         console.error(err);\n         let errCode = err.code;\n   \n         switch(errCode) {\n            case 'auth/email-already-in-use':\n               return Status.emailAlreadyInUse\n            break;\n            case 'auth/invalid-email':\n               return Status.emailBadlyFormatted\n            break;\n            case 'auth/operation-not-allowed':\n               return Status.operationNotAllowed\n            break;\n            case 'auth/weak-password':\n               return Status.weakPassword\n            break;\n            default: return Status.unknownError\n         } \n      };\n   }\n\n   const setUserDetailsInFirestore = async (name:string, emailID:string, address:string, contactNo:string):Promise<Status> => {\n      try {\n         const res = await database.collection(GLOBALS.firebase.firestore.collections.names.users).add({\n            name: name,\n            emailID: emailID,\n            address: address,\n            contactNo: contactNo\n         });\n         return Status.successful;\n      } catch (err) {\n         console.error(err);\n         return Status.unknownError;\n      }\n   }\n\n   return (\n      <View style={styles(dimensions).background}>\n         <View>\n            <CustomAppBar title='Login'/>\n               <Portal>\n                  <Modal\n                     dismissable={false}\n                     visible={modalVisible}\n                     contentContainerStyle={styles(dimensions).modalContent}\n                     style={styles(dimensions).modal}\n                  >\n                     <View style={styles(dimensions).modalHeadingContainer}>\n                        <Text style={styles(dimensions).modalHeading}>\n                           Information:\n                        </Text>\n                     </View>\n                     <View>\n                        {\n                           signUpModalDetailsTextInput.map((detail:TextInputDetail) => {\n                              return (\n                                 <View>\n                                    <CustomTextInput \n                                       placeholder={detail.placeholder}\n                                       onChangeText={detail.onChangeText}\n                                       value={detail.value}\n                                       obscureText={false}\n                                       width={(dimensions.width / 2) / 2} //dimensions.width / 2 is the width of the modal\n                                    />\n                                 </View>\n                              )\n                           })\n                        }\n                        <View style={styles(dimensions).modalButtonGroupContainer}>\n                        {\n                           modalButtonDetails.map((detail:ButtonDetail) => {\n                              return (\n                                 <View style={styles(dimensions).modalButtonContainer}>\n                                    <CustomButton \n                                       buttonText={detail.buttonText}\n                                       buttonColor={detail.buttonColor}\n                                       onPress={detail.onPress}\n                                       buttonTextColor='white'\n                                    />\n                                 </View>\n                              )\n                           })\n                        }\n                        </View>\n                     </View>\n                  </Modal>\n               </Portal>\n            <View style={styles(dimensions).imageContainer}>\n               <Avatar \n                  rounded\n                  overlayContainerStyle={styles(dimensions).avatar}\n                  size = {dimensions.height / 3}\n                  icon={{\n                     type:'ionicon',\n                     name: 'leaf',\n                     color: '#63b175',\n                  }}\n               />\n            </View>\n            <View style={styles(dimensions).detailsContainer}>\n               {\n                  textInputDetails.map((detail:TextInputDetail) => {\n                     return (\n                        <View style={styles(dimensions).textInputContainer}>\n                           <CustomTextInput \n                              placeholder={detail.placeholder} \n                              width={dimensions.width / 2}\n                              value={detail.value}\n                              onChangeText={detail.onChangeText}\n                              obscureText={detail.obscureText ? detail.obscureText:false}\n                           />\n                        </View>\n                     )\n                  })\n               }\n               <View>\n                  {\n                     buttonDetails.map((detail:ButtonDetail) => {\n                        return (\n                           <View style={styles(dimensions).buttonContainer}>\n                              <CustomButton \n                                 buttonText={detail.buttonText}\n                                 buttonTextColor='white'\n                                 buttonColor={detail.buttonColor}\n                                 onPress={detail.onPress}\n                              />\n                           </View>\n                        );\n                     })\n                  }\n               </View>\n            </View>\n         </View>\n      </View> \n   );\n}","import React, { useEffect, useState } from 'react';\nimport { View, Dimensions, ScaledSize, StyleSheet, useWindowDimensions } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport CustomButton from '../components/CustomButton';\n\nimport Status from '../constants/status';\nimport GLOBALS from '../constants/globals';\n\nimport database from '../configs/firebase.config';\nimport firebase from 'firebase';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   maxLength?: number,\n   multiline?: boolean,\n   height?: number\n}\n\nfunction RequestScreen() {\n\n   const dimensions = useWindowDimensions();\n      \n   let [ name, setName ] = useState<string>('');\n   let [ description, setDescription ] = useState<string>('');\n   \n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Description',\n         onChangeText: (text:string) => setDescription(text),\n         value: description,\n         maxLength: 200,\n         height: dimensions.height * 0.6,\n         multiline: true\n      },\n   ]\n\n   const styles = (dimensions:ScaledSize) => StyleSheet.create({\n      allTextInputsContainer: {\n         paddingLeft: (dimensions.width / 2 - ((dimensions.width / 2) / 2)), // dimensions.width / 2 is the width of the textinput\n      },\n      textInputContainer: {\n         paddingTop: 20,\n      },\n      textInput: {\n         fontSize: 20,\n      },\n      submitButtonContainer: {\n         paddingTop: 20,\n         paddingLeft: (dimensions.width / 2) - (100 / 2),// 100 is the width of the button\n         paddingRight: (dimensions.width / 2) - (100 / 2)// 100 is the width of the button\n      }\n   })\n\n   const validateAndSubmitDetails = async (name:string, description:string) => {\n      console.log(`Name and Description: ${name} ${description}`)\n      if(name == null || name.trim().length == 0) return Status.emptyField1;\n      if(description == null || description.trim().length == 0) return Status.emptyField2;\n\n      if(description.trim().length < 10) return Status.shortDetails;\n\n      return await database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).add({\n         name: name,\n         description: description,\n         timeStamp: firebase.firestore.Timestamp.now()\n      })\n      .then(res => Status.successful)\n      .catch(err => Status.unknownError);\n   }\n\n   return (\n      <View>\n         <CustomAppBar title='Request Screen' color='#96D25A'/>\n         <View style={styles(dimensions).allTextInputsContainer}>\n         {\n            textInputDetails.map(\n               (detail:TextInputDetail) => {\n                  return (\n                     <View style={styles(dimensions).textInputContainer}>\n                        <CustomTextInput \n                           placeholder={detail.placeholder}\n                           onChangeText={detail.onChangeText}\n                           value={detail.value}\n                           obscureText={false}\n                           width={dimensions.width / 2}\n                           height={detail.height || undefined}\n                           multiline={detail.multiline || false}\n                           maxLength={detail.maxLength || undefined}\n                           outlinedBorder={true}\n                        />\n                     </View>\n                  )\n               }\n            )\n         }\n         </View>\n         <View style={styles(dimensions).submitButtonContainer}>\n            <CustomButton \n               buttonColor='red'\n               buttonText='Submit'\n               buttonTextColor='white'\n               onPress={async () => {\n                  let dataSubmittedStatus:Status = await validateAndSubmitDetails(name, description);\n                  switch(dataSubmittedStatus) {\n                     case Status.emptyField1:\n                        alert(`Please fill the name field!`);\n                     break;\n                     case Status.emptyField2:\n                        alert(`Please fill the description field!`)\n                     break;\n                     case Status.shortDetails:\n                        alert(`Description too short!`);\n                     break;\n                     case Status.successful:\n                        alert(`Data submitted successfully!`)\n                     break;\n                     default: alert(`Some error occurred!`)\n                  }\n               }}\n            />\n         </View>\n      </View>\n   )\n}\n\nexport default RequestScreen;","import React, { useState, useEffect } from 'react';\nimport { View, Text, Dimensions, ScaledSize, StyleSheet, useWindowDimensions } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport { FlatList, TouchableOpacity } from 'react-native-gesture-handler';\nimport database from '../configs/firebase.config';\nimport GLOBALS from '../constants/globals';\nimport { List, Divider } from 'react-native-paper';\nimport CustomButton from '../components/CustomButton';\nimport { useNavigation, DrawerActions } from '@react-navigation/native';\n\ninterface ItemInterface {\n   name: string,\n   description: string,\n   timeStamp: Date\n}\n\ninterface Props {\n   navigation: any\n}\n\nfunction ExchangeScreen(props:Props) {\n\n   const [itemsList, setItemsList] = useState<any[]>([]);\n   const [lastItemFetchedTimestamp, setLastItemFetchedTimestamp] = useState<Date | null>(null);\n\n   const dimensions = useWindowDimensions();\n\n   useEffect(() => {\n      fetchItems(null)\n   }, []);\n\n   const styles = (dimensions: ScaledSize) => StyleSheet.create({\n      exchangeButtonContainer: {\n         height: '50%',\n         width: dimensions.width * 0.2\n      },\n      divider: {\n         backgroundColor: 'rgba(0,0,0,0.3)'\n      }\n   })\n\n   const fetchItems = (lastItemFetchedTimestamp?: Date | null) => {\n      try {\n         let dbRef;\n         lastItemFetchedTimestamp != null ?\n         dbRef = database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).orderBy('timeStamp').startAfter(lastItemFetchedTimestamp).limit(1)\n         :\n         dbRef = database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange).limit(1)\n\n         database.collection(GLOBALS.firebase.firestore.collections.names.itemsToExchange)\n            .onSnapshot(snapshot => {\n               let dataList = [];\n               dataList = snapshot.docs.map(doc => doc.data());                              \n               setItemsList(oldList => {\n                  oldList.push(...dataList);\n                  return oldList;\n               });\n               if(dataList.length > 0) setLastItemFetchedTimestamp((oldTimestamp) => dataList[dataList.length - 1].timeStamp);\n            })\n      } catch (e) {\n         alert(`Some error Occurred in fetching the data!`);\n         console.log(e);\n      }\n   }\n\n   const renderItem = ({ item, index }) => {\n      return (\n         <View>\n            <View>\n               <List.Item\n                  theme={{\n                     colors: {\n                        text: 'black'\n                     }\n                  }}\n                  left={(prop) => <List.Icon icon='table-furniture' color='black'/>}\n                  right={(prop) => (\n                     <View style={styles(dimensions).exchangeButtonContainer}>\n                        <CustomButton\n                           buttonText='Exchange'\n                           buttonTextColor='white'\n                           buttonColor='red'\n                           onPress={() => exchangeItem(item)}\n                        />\n                     </View>\n                  )}\n                  title={item.name}\n                  description={item.description}\n               />\n               <Divider style={styles(dimensions).divider} />\n            </View>\n         </View>\n      );\n   }\n\n   const exchangeItem = (item: any) => {\n      alert(`Exchanging item with name ${item.name}`)\n   }\n\n   return (\n      <View>\n         <CustomAppBar title='Exchange Screen' color='#ffca28' drawerAvailable={true}/>\n         <View>\n            <FlatList\n               data={itemsList}\n               renderItem={renderItem}\n               keyExtractor={(item, index) => index.toString()}\n               onEndReachedThreshold={10}\n               onEndReached={() => fetchItems(lastItemFetchedTimestamp)}\n            />\n         </View>\n      </View>\n   )\n}\n\nexport default ExchangeScreen;","import React from 'react';\nimport { View, Text } from 'react-native';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport RequestScreen from './RequestScreen';\nimport ExchangeScreen from './ExchangeScreen';\nimport MaterialCommunityIcons from 'react-native-vector-icons/FontAwesome';\n\nfunction ExchangeViewTabNavigator() {\n\n   const BottomTab = createMaterialBottomTabNavigator();\n\n   return (\n      <BottomTab.Navigator\n         barStyle={{ backgroundColor: 'purple' }}\n      >\n         <BottomTab.Screen\n            name=\"exchangeScreen\"\n            component={ExchangeScreen}\n            options={{\n               tabBarLabel: 'Exchange Screen',\n               title: 'Exchange Items',\n               tabBarIcon: ({color}) => <MaterialCommunityIcons \n                  name='handshake-o'\n                  size={20}\n                  color={color}\n               />\n            }}\n         />\n         <BottomTab.Screen\n            name=\"requestScreen\"\n            component={RequestScreen}\n            options={{\n               tabBarLabel: 'Request Screen',\n               title: 'Request Items',\n               tabBarIcon: ({color}) => <MaterialCommunityIcons \n                  name='envelope-open'\n                  size={20}\n                  color={color}\n               />\n            }}\n         />\n      </BottomTab.Navigator>\n   )\n}\n\nexport default ExchangeViewTabNavigator;","import React, { useState, useEffect } from 'react';\nimport { Text, View, useWindowDimensions, StyleSheet, ScaledSize } from 'react-native';\nimport CustomAppBar from '../components/CustomAppBar';\nimport CustomTextInput from '../components/CustomTextInput';\nimport CustomButton from '../components/CustomButton';\nimport database from '../configs/firebase.config';\nimport GLOBALS from '../constants/globals';\nimport firebase from 'firebase';\n\ninterface TextInputDetail {\n   placeholder:string,\n   onChangeText: (text:string) => void,\n   value: string,\n   maxLength?: number,\n   multiline?: boolean,\n   height?: number\n}\n\nfunction SettingsScreen() {\n\n   const [name, setName] = useState<string>('');\n   const [emailID, setEmailID] = useState<string>('');\n   const [address, setAddress] = useState<string>('');\n   const [contactNo, setContactNo] = useState<string>('');\n\n   const [userDocId, setUserDocId] = useState<string>('');\n\n   const windowDetails = useWindowDimensions();\n\n   useEffect(() => {\n      let currentUserEmail:string|null|undefined = firebase.auth().currentUser?.email;\n\n      if(currentUserEmail) {\n         getAndSetUserDetails(currentUserEmail);\n      } else {\n         alert('User not signed in');\n      }\n   }, []);\n\n   \n\n   const styles = (windowDetails:ScaledSize) => StyleSheet.create({\n      background: {\n         backgroundColor: '#CDDC39',\n         height: '100vh',      \n      },\n      textInputContainer: {\n         paddingTop: windowDetails.height / 50,\n         alignItems: 'center'\n      },\n      buttonContainer: {\n         paddingTop: windowDetails.height / 50,\n         paddingLeft: (windowDetails.width / 2) - ((windowDetails.width / 4) / 2),\n         paddingRight: (windowDetails.width / 2) - ((windowDetails.width / 4) / 2),\n      }\n   });\n\n   const firestore = GLOBALS.firebase.firestore;\n\n   const getAndSetUserDetails = (currentUserEmailID:string) => {\n      try {\n         database.collection(firestore.collections.names.users).where('emailID', '==', currentUserEmailID).limit(1) //get unique result\n         .onSnapshot(\n            (snapshot) => {\n               snapshot.docs.map(doc => {\n   \n                  setUserDocId(doc.id);\n   \n                  let data = doc.data();\n   \n                  setName(data.name);\n                  setEmailID(data.emailID);\n                  setAddress(data.address);\n                  setContactNo(data.contactNo);\n   \n               })\n            }\n         )\n      } catch(e) {\n         console.error(e);\n         alert(`Some error occurred while fetching the details.`)\n      }\n      \n   }\n\n   const updateProfile = (name:string, emailID:string, address:string, contactNo:string) => {\n\n      try {\n         database.collection(firestore.collections.names.users).doc(userDocId).update({\n            name: name,\n            emailID: emailID,\n            address: address,\n            contactNo: contactNo,\n         });\n         alert(`User details updated successfully`)\n      } catch(e) {\n         console.error(e);\n         alert(`Some error occured in saving the user details`);\n      }\n   }\n\n   let textInputDetails:TextInputDetail[] = [\n      {\n         placeholder: 'Name',\n         onChangeText: (text:string) => setName(text),\n         value: name,\n      },\n      {\n         placeholder: 'Email ID',\n         onChangeText: (text:string) => setEmailID(text),\n         value: emailID,\n      },\n      {\n         placeholder: 'Address',\n         onChangeText: (text:string) => setAddress(text),\n         value: address,\n      },\n      {\n         placeholder: 'Contact No.',\n         onChangeText: (text:string) => setContactNo(text),\n         value: contactNo,\n      },\n   ]\n\n   return (\n      <View style={styles(windowDetails).background}>\n         <CustomAppBar title='Settings Screen' color='#1e9c91' drawerAvailable={true}/>\n         <View>\n            <View>\n               {\n                  textInputDetails.map(detail => {\n                     return (\n                        <View style={styles(windowDetails).textInputContainer}>\n                           <CustomTextInput \n                              placeholder={detail.placeholder}\n                              onChangeText={detail.onChangeText}\n                              value={detail.value}\n                              obscureText={false}\n                              outlinedBorder={true}\n                              height={windowDetails.height / 12}\n                              width={windowDetails.width / 2}\n                           />\n                        </View>\n                     )\n                  })\n               }\n            </View>\n            <View style={styles(windowDetails).buttonContainer}>\n               <CustomButton \n                 buttonColor='rgba(88,111,121,1.0)'\n                 buttonText='Submit'\n                 buttonTextColor='white'\n                 onPress={() => updateProfile(name, emailID, address, contactNo)} \n               />\n            </View>\n         </View>\n      </View>\n   );\n}\n\nexport default SettingsScreen;","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Platform, Dimensions, ScaledSize, useWindowDimensions } from 'react-native';\nimport database from './configs/firebase.config';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator, DrawerContentComponentProps, DrawerContentOptions, DrawerContent } from '@react-navigation/drawer';\nimport { DrawerItems } from 'react-navigation-drawer';\n\n//screens and assets\nimport LoginScreen from './screens/LoginScreen';\nimport { Provider } from 'react-native-paper';\nimport ExchangeViewTabNavigator from './screens/ ExchangeViewTabNavigator';\nimport CustomButton from './components/CustomButton';\nimport firebase from 'firebase';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { NavigationActions } from 'react-navigation';\nimport { Icon } from 'react-native-elements';\nimport SettingsScreen from './screens/SettingsScreen';\n\ninterface DrawerScreenInfo {\n\tname: string,\n\tcomponent: any\n}\n\ninterface StackScreenInfo {\n\tname: string,\n\tcomponent: any\n}\n\nfunction Root() {\n\tconst Stack = createStackNavigator();\n\n\tconst defaultOptions = {\n\t\theaderShown: false\n\t}\n\n\tconst stackScreenInfoList:StackScreenInfo[] = [\n\t\t{\n\t\t\tname: 'loginScreen',\n\t\t\tcomponent: LoginScreen,\n\t\t},\n\t\t{\n\t\t\tname: 'homeScreen',\n\t\t\tcomponent: ExchangeViewTabNavigator,\n\t\t}\n\t];\n\n\treturn (\n\t\t<Stack.Navigator initialRouteName='loginScreen'>\n\t\t\t{\n\t\t\t\tstackScreenInfoList.map(detail => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Stack.Screen \n\t\t\t\t\t\t\tname={detail.name}\n\t\t\t\t\t\t\tcomponent={detail.component}\n\t\t\t\t\t\t\toptions={defaultOptions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</Stack.Navigator>\n\n\t)\n}\n\nexport default function App() {\n\n\t// if(database) database.enablePersistence();\n\tconst dimensions = useWindowDimensions();\n\n\tconst Drawer = createDrawerNavigator();\n\n\tconst defaultOptions = {\n\t\theaderShown: false\n\t}\n\n\tconst styles = (dimensions: ScaledSize) => StyleSheet.create({\n\t\tdrawer: {\n\t\t\tborderTopRightRadius: 20,\n\t\t\tborderBottomRightRadius: 20,\n\t\t},\n\t\tdrawerContent: {\n\t\t\tflex: 1\n\t\t},\n\t\tlogOutButton: {\n\t\t\tflex: 1,\n\t\t\tjustifyContent: 'flex-end',\n\t\t\tpaddingLeft: '5%',\n\t\t\tpaddingBottom: '5%'\n\t\t},\n\t\tlogOutButtonContent: {\n\t\t\tflexDirection: 'row',\n\t\t\talignItems: 'center'\n\t\t},\n\t\tlogOutButtonText: {\n\t\t\tpaddingLeft: '3%',\n\t\t\tfontWeight: 'bold',\n\t\t\tfontSize: 15\n\t\t}\n\t})\n\n\n\tconst logOutUserAndNavigateToLoginScreen = async (navigation: any) => {\n\t\tawait firebase.auth().signOut();\n\t\tnavigation.navigate('loginScreen');\n\t}\n\n\tconst drawerScreenInfoList:DrawerScreenInfo[] = [\n\t\t{\n\t\t\tname: 'Home',\n\t\t\tcomponent: Root,\n\t\t},\n\t\t{\n\t\t\tname: 'Settings',\n\t\t\tcomponent: SettingsScreen,\n\t\t}\n\t];\n\n\treturn (\n\t\t<Provider>\n\t\t\t<NavigationContainer>\n\t\t\t\t<Drawer.Navigator\n\t\t\t\t\tinitialRouteName='homeScreen'\n\t\t\t\t\tdrawerStyle={styles(dimensions).drawer}\n\t\t\t\t\tdrawerContent={(options) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<View style={styles(dimensions).drawerContent}>\n\t\t\t\t\t\t\t\t<DrawerContent\n\t\t\t\t\t\t\t\t\tstate={options.state}\n\t\t\t\t\t\t\t\t\tnavigation={options.navigation}\n\t\t\t\t\t\t\t\t\tdescriptors={options.descriptors}\n\t\t\t\t\t\t\t\t\tprogress={options.progress}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<View style={styles(dimensions).logOutButton}>\n\t\t\t\t\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\t\t\t\t\tonPress={() => logOutUserAndNavigateToLoginScreen(options.navigation)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<View style={styles(dimensions).logOutButtonContent}>\n\t\t\t\t\t\t\t\t\t\t\t<Icon name='power-off' type='font-awesome'/>\n\t\t\t\t\t\t\t\t\t\t\t<Text style={styles(dimensions).logOutButtonText}>Log Out</Text>\n\t\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t\tdrawerType='front'\n\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tdrawerScreenInfoList.map(detail => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Drawer.Screen \n\t\t\t\t\t\t\t\t\tname={detail.name}\n\t\t\t\t\t\t\t\t\tcomponent={detail.component}\n\t\t\t\t\t\t\t\t\toptions={defaultOptions}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</Drawer.Navigator>\n\t\t\t</NavigationContainer>\n\t\t</Provider>\n\t)\n\n}\n\nexport const injectWebCss = () => {\n\n\t// Only on web\n\tif (Platform.OS != 'web') return\n\n\t// Inject style\n\tconst style = document.createElement('style')\n\tstyle.textContent = `textarea, select, input, button { outline: none!important; }`\n\treturn document.head.append(style)\n\n}\n\ninjectWebCss()"],"sourceRoot":""}